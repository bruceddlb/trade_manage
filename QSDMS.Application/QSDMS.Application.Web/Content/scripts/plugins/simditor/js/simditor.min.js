/*!
* Simditor v2.3.5
* http://simditor.tower.im/
* 2015-11-19
*/(function (g, p) { "function" === typeof define && define.amd ? define("simditor", ["jquery", "simple-module", "simple-hotkeys", "simple-uploader"], function (z, A, r, t) { return g.Simditor = p(z, A, r, t) }) : "object" === typeof exports ? module.exports = p(require("jquery"), require("simple-module"), require("simple-hotkeys"), require("simple-uploader")) : g.Simditor = p(jQuery, SimpleModule, simple.hotkeys, simple.uploader) })(this, function (g, p, z, A) { var r, t, B, C, D, E, F, G, H, I, x, J, q, K, L, M, n = function (g, b) { function a() { this.constructor = g } for (var c in b) N.call(b, c) && (g[c] = b[c]); a.prototype = b.prototype; g.prototype = new a; g.__super__ = b.prototype; return g }, N = {}.hasOwnProperty, y = [].indexOf || function (g) { for (var b = 0, a = this.length; b < a; b++) if (b in this && this[b] === g) return b; return -1 }, w = [].slice; J = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.pluginName = "Selection"; b.prototype._range = null; b.prototype._startNodes = null; b.prototype._endNodes = null; b.prototype._containerNode = null; b.prototype._nodes = null; b.prototype._blockNodes = null; b.prototype._rootNodes = null; b.prototype._init = function () { this.editor = this._module; this._selection = document.getSelection(); this.editor.on("selectionchanged", function (a) { return function (c) { a.reset(); return a._range = a._selection.getRangeAt(0) } }(this)); return this.editor.on("blur", function (a) { return function (c) { return a.reset() } }(this)) }; b.prototype.reset = function () { return this._rootNodes = this._blockNodes = this._nodes = this._containerNode = this._endNodes = this._startNodes = this._range = null }; b.prototype.clear = function () { try { this._selection.removeAllRanges() } catch (a) { } return this.reset() }; b.prototype.range = function (a) { a ? (this.clear(), this._selection.addRange(a), this._range = a, a = this.editor.util.browser.firefox || this.editor.util.browser.msie, !this.editor.inputManager.focused && a && this.editor.body.focus()) : !this._range && this.editor.inputManager.focused && this._selection.rangeCount && (this._range = this._selection.getRangeAt(0)); return this._range }; b.prototype.startNodes = function () { this._range && (this._startNodes || (this._startNodes = function (a) { return function () { var c; c = g(a._range.startContainer).parentsUntil(a.editor.body).get(); c.unshift(a._range.startContainer); return g(c) } }(this)())); return this._startNodes }; b.prototype.endNodes = function () { var a; this._range && (this._endNodes || (this._endNodes = this._range.collapsed ? this.startNodes() : (a = g(this._range.endContainer).parentsUntil(this.editor.body).get(), a.unshift(this._range.endContainer), g(a)))); return this._endNodes }; b.prototype.containerNode = function () { this._range && (this._containerNode || (this._containerNode = g(this._range.commonAncestorContainer))); return this._containerNode }; b.prototype.nodes = function () { this._range && (this._nodes || (this._nodes = function (a) { return function () { var c; c = []; a.startNodes().first().is(a.endNodes().first()) ? c = a.startNodes().get() : (a.startNodes().each(function (d, b) { var e, l, k; l = g(b); if (-1 < a.endNodes().index(l)) return c.push(b); if (l.parent().is(a.editor.body) || -1 < (k = a.endNodes().index(l.parent()))) return e = k && -1 < k ? a.endNodes().eq(k - 1) : a.endNodes().last(), k = l.parent().contents(), l = k.index(l), e = k.index(e), g.merge(c, k.slice(l, e).get()); k = l.parent().contents(); e = k.index(l); return g.merge(c, k.slice(e).get()) }), a.endNodes().each(function (d, b) { var e, l; e = g(b); if (e.parent().is(a.editor.body) || -1 < a.startNodes().index(e.parent())) return c.push(b), !1; l = e.parent().contents(); e = l.index(e); return g.merge(c, l.slice(0, e + 1)) })); return g(g.unique(c)) } }(this)())); return this._nodes }; b.prototype.blockNodes = function () { if (this._range) return this._blockNodes || (this._blockNodes = function (a) { return function () { return a.nodes().filter(function (c, d) { return a.editor.util.isBlockNode(d) }) } }(this)()), this._blockNodes }; b.prototype.rootNodes = function () { if (this._range) return this._rootNodes || (this._rootNodes = function (a) { return function () { return a.nodes().filter(function (c, d) { var b; b = g(d).parent(); return b.is(a.editor.body) || b.is("blockquote") }) } }(this)()), this._rootNodes }; b.prototype.rangeAtEndOf = function (a, c) { var d, b, f, l, k; null == c && (c = this.range()); if (c && c.collapsed) { a = g(a)[0]; f = c.endContainer; d = this.editor.util.getNodeLength(f); b = c.endOffset === d - 1; l = g(f).contents().last().is("br"); d = c.endOffset === d; if (!(b && l || d)) return !1; if (a === f) return !0; if (!g.contains(a, f)) return !1; k = !0; g(f).parentsUntil(a).addBack().each(function (a, c) { var d, b; d = g(c).parent().contents().filter(function () { return !(this !== c && 3 === this.nodeType && !this.nodeValue) }).last(); b = d.get(0) === c; d = d.is("br") && d.prev().get(0) === c; if (!b && !d) return k = !1 }); return k } }; b.prototype.rangeAtStartOf = function (a, c) { var d, b; null == c && (c = this.range()); if (c && c.collapsed) { a = g(a)[0]; b = c.startContainer; if (0 !== c.startOffset) return !1; if (a === b) return !0; if (!g.contains(a, b)) return !1; d = !0; g(b).parentsUntil(a).addBack().each(function (a, c) { if (g(c).parent().contents().filter(function () { return !(this !== c && 3 === this.nodeType && !this.nodeValue) }).first().get(0) !== c) return d = !1 }); return d } }; b.prototype.insertNode = function (a, c) { null == c && (c = this.range()); if (c) return a = g(a)[0], c.insertNode(a), this.setRangeAfter(a, c) }; b.prototype.setRangeAfter = function (a, c) { null == c && (c = this.range()); if (null != c) return a = g(a)[0], c.setEndAfter(a), c.collapse(!1), this.range(c) }; b.prototype.setRangeBefore = function (a, c) { null == c && (c = this.range()); if (null != c) return a = g(a)[0], c.setEndBefore(a), c.collapse(!1), this.range(c) }; b.prototype.setRangeAtStartOf = function (a, c) { null == c && (c = this.range()); a = g(a).get(0); c.setEnd(a, 0); c.collapse(!1); return this.range(c) }; b.prototype.setRangeAtEndOf = function (a, c) { var d, b, f; null == c && (c = this.range()); d = g(a); a = d[0]; d.is("pre") ? (d = d.contents(), 0 < d.length ? (d = d.last(), f = d.text(), b = this.editor.util.getNodeLength(d[0]), "\n" === f.charAt(f.length - 1) ? c.setEnd(d[0], b - 1) : c.setEnd(d[0], b)) : c.setEnd(a, 0)) : (b = this.editor.util.getNodeLength(a), 3 !== a.nodeType && 0 < b && (d = g(a).contents().last(), d.is("br") ? --b : 3 !== d[0].nodeType && this.editor.util.isEmptyNode(d) && (d.append(this.editor.util.phBr), a = d[0], b = 0)), c.setEnd(a, b)); c.collapse(!1); return this.range(c) }; b.prototype.deleteRangeContents = function (a) { var c, d; null == a && (a = this.range()); d = a.cloneRange(); c = a.cloneRange(); d.collapse(!0); c.collapse(!1); d = this.rangeAtStartOf(this.editor.body, d); c = this.rangeAtEndOf(this.editor.body, c); !a.collapsed && d && c ? (this.editor.body.empty(), a.setStart(this.editor.body[0], 0), a.collapse(!0), this.range(a)) : a.deleteContents(); return a }; b.prototype.breakBlockEl = function (a, c) { var d; null == c && (c = this.range()); d = g(a); if (!c.collapsed) return d; c.setStartBefore(d.get(0)); return c.collapsed ? d : d.before(c.extractContents()) }; b.prototype.save = function (a) { var c, d, b; null == a && (a = this.range()); if (!this._selectionSaved) return d = a.cloneRange(), d.collapse(!1), b = g("\x3cspan/\x3e").addClass("simditor-caret-start"), c = g("\x3cspan/\x3e").addClass("simditor-caret-end"), d.insertNode(c[0]), a.insertNode(b[0]), this.clear(), this._selectionSaved = !0 }; b.prototype.restore = function () { var a, c, d, b, f, l, g; if (!this._selectionSaved) return !1; f = this.editor.body.find(".simditor-caret-start"); a = this.editor.body.find(".simditor-caret-end"); f.length && a.length ? (l = f.parent(), g = l.contents().index(f), c = a.parent(), d = c.contents().index(a), l[0] === c[0] && --d, b = document.createRange(), b.setStart(l.get(0), g), b.setEnd(c.get(0), d), f.remove(), a.remove(), this.range(b)) : (f.remove(), a.remove()); this._selectionSaved = !1; return b }; return b }(p); D = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.pluginName = "Formatter"; b.prototype.opts = { allowedTags: [], allowedAttributes: {}, allowedStyles: {} }; b.prototype._init = function () { this.editor = this._module; this._allowedTags = g.merge("br span a img b strong i strike u font p ul ol li blockquote pre code h1 h2 h3 h4 hr".split(" "), this.opts.allowedTags); this._allowedAttributes = g.extend({ img: ["src", "alt", "width", "height", "data-non-image"], a: ["href", "target"], font: ["color"], code: ["class"] }, this.opts.allowedAttributes); this._allowedStyles = g.extend({ span: ["color", "font-size", "letter-spacing", "line-height"], b: ["color", "letter-spacing", "line-height"], i: ["color"], strong: ["color"], strike: ["color"], u: ["color"], p: ["margin-left", "text-align", "letter-spacing", "line-height"], h1: ["margin-left", "text-align"], h2: ["margin-left", "text-align"], h3: ["margin-left", "text-align"], h4: ["margin-left", "text-align"] }, this.opts.allowedStyles); return this.editor.body.on("click", "a", function (a) { return !1 }) }; b.prototype.decorate = function (a) { null == a && (a = this.editor.body); this.editor.trigger("decorate", [a]); return a }; b.prototype.undecorate = function (a) { null == a && (a = this.editor.body.clone()); this.editor.trigger("undecorate", [a]); return a }; b.prototype.autolink = function (a) { var c, d, b, f, l, k, m, v, h, u, n; null == a && (a = this.editor.body); m = []; b = function (c) { return c.contents().each(function (c, d) { var f, e; f = g(d); if (!f.is("a") && !f.closest("a, pre", a).length) { if (!f.is("iframe") && f.contents().length) return b(f); if ((e = f.text()) && /https?:\/\/|www\./ig.test(e)) return m.push(f) } }) }; b(a); v = /(https?:\/\/|www\.)[\w\-\.\?&=\/#%:,@\!\+]+/ig; f = 0; for (k = m.length; f < k; f++) { d = m[f]; u = d.text(); h = []; c = null; for (l = 0; null !== (c = v.exec(u)) ;) l = u.substring(l, c.index), h.push(document.createTextNode(l)), l = v.lastIndex, n = /^(http(s)?:\/\/|\/)/.test(c[0]) ? c[0] : "http://" + c[0], c = g('\x3ca href\x3d"' + n + '" rel\x3d"nofollow"\x3e\x3c/a\x3e').text(c[0]), h.push(c[0]); h.push(document.createTextNode(u.substring(l))); d.replaceWith(g(h)) } return a }; b.prototype.format = function (a) { var c, d, b, f, l, k; null == a && (a = this.editor.body); if (a.is(":empty")) return a.append("\x3cp\x3e" + this.editor.util.phBr + "\x3c/p\x3e"), a; l = a.contents(); c = 0; for (b = l.length; c < b; c++) f = l[c], this.cleanNode(f, !0); k = a.contents(); b = 0; for (f = k.length; b < f; b++) if (l = k[b], c = g(l), c.is("br")) "undefined" !== typeof d && null !== d && (d = null), c.remove(); else if (this.editor.util.isBlockNode(l)) c.is("li") ? (d && d.is("ul, ol") || (d = g("\x3cul/\x3e").insertBefore(l)), d.append(l)) : d = null; else { if (!d || d.is("ul, ol")) d = g("\x3cp/\x3e").insertBefore(l); d.append(l); this.editor.util.isEmptyNode(d) && d.append(this.editor.util.phBr) } return a }; b.prototype.cleanNode = function (a, c) { var d, b, f, l, k, m, v, h, u; f = g(a); if (0 < f.length) if (3 === f[0].nodeType) (m = f.text().replace(/(\r\n|\n|\r)/gm, "")) ? (m = document.createTextNode(m), f.replaceWith(m)) : f.remove(); else { m = f.is("iframe") ? null : f.contents(); v = this.editor.util.isDecoratedNode(f); if (f.is(this._allowedTags.join(",")) || v) { if (f.is("a") && 0 < (b = f.find("img")).length && (f.replaceWith(b), f = b, m = null), f.is("td") && 0 < (d = f.find(this.editor.util.blockNodes.join(","))).length && (d.each(function (a) { return function (a, c) { return g(c).contents().unwrap() } }(this)), m = f.contents()), f.is("img") && f.hasClass("uploading") && f.remove(), !v) { d = this._allowedAttributes[f[0].tagName.toLowerCase()]; u = g.makeArray(f[0].attributes); v = 0; for (h = u.length; v < h; v++) b = u[v], "style" !== b.name && (null != d && (k = b.name, 0 <= y.call(d, k)) || f.removeAttr(b.name)); this._cleanNodeStyles(f); f.is("span") && 0 === f[0].attributes.length && f.contents().first().unwrap() } } else 1 !== f[0].nodeType || f.is(":empty") ? (f.remove(), m = null) : f.is("div, article, dl, header, footer, tr") ? (f.append("\x3cbr/\x3e"), m.first().unwrap()) : f.is("table") ? (l = g("\x3cp/\x3e"), f.find("tr").each(function (a, c) { return l.append(g(c).text() + "\x3cbr/\x3e") }), f.replaceWith(l), m = null) : f.is("thead, tfoot") ? (f.remove(), m = null) : f.is("th") ? (k = g("\x3ctd/\x3e").append(f.contents()), f.replaceWith(k)) : m.first().unwrap(); if (c && null != m && !f.is("pre")) for (f = 0, k = m.length; f < k; f++) d = m[f], this.cleanNode(d, !0); return null } }; b.prototype._cleanNodeStyles = function (a) { var c, d, b, f, l, k, m; if (d = a.attr("style")) { a.removeAttr("style"); c = this._allowedStyles[a[0].tagName.toLowerCase()]; if (!(c && 0 < c.length)) return a; m = {}; l = d.split(";"); d = 0; for (b = l.length; d < b; d++) if (f = l[d], f = g.trim(f), f = f.split(":"), f.length = 2, k = f[0], 0 <= y.call(c, k)) m[g.trim(f[0])] = g.trim(f[1]); 0 < Object.keys(m).length && a.css(m); return a } }; b.prototype.clearHtml = function (a, c) { var d, b; null == c && (c = !0); d = g("\x3cdiv/\x3e").append(a).contents(); b = ""; d.each(function (a) { return function (f, e) { var l, k; if (3 === e.nodeType) return b += e.nodeValue; if (1 === e.nodeType && (l = g(e), (k = l.is("iframe") ? null : l.contents()) && 0 < k.length && (b += a.clearHtml(k)), c && f < d.length - 1 && l.is("br, p, div, li,tr, pre, address, artticle, aside, dl, figcaption, footer, h1, h2,h3, h4, header"))) return b += "\n" } }(this)); return b }; b.prototype.beautify = function (a) { var c; c = function (a) { return !!(a.is("p") && !a.text() && 1 > a.children(":not(br)").length) }; return a.each(function (a, b) { var d; d = g(b); (d.is(':not(img, br, col, td, hr, [class^\x3d"simditor-"]):empty') || c(d)) && d.remove(); return d.find(':not(img, br, col, td, hr, [class^\x3d"simditor-"]):empty').remove() }) }; return b }(p); G = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.pluginName = "InputManager"; b.prototype._modifierKeys = [16, 17, 18, 91, 93, 224]; b.prototype._arrowKeys = [37, 38, 39, 40]; b.prototype._init = function () { var a; this.editor = this._module; this.throttledValueChanged = this.editor.util.throttle(function (a) { return function (c) { return setTimeout(function () { return a.editor.trigger("valuechanged", c) }, 10) } }(this), 300); this.throttledSelectionChanged = this.editor.util.throttle(function (a) { return function () { return a.editor.trigger("selectionchanged") } }(this), 50); g(document).on("selectionchange.simditor" + this.editor.id, function (a) { return function (c) { var b; if (a.focused && !a.editor.clipboard.pasting) return b = function () { a._selectionTimer && (clearTimeout(a._selectionTimer), a._selectionTimer = null); return 0 < a.editor.selection._selection.rangeCount ? a.throttledSelectionChanged() : a._selectionTimer = setTimeout(function () { a._selectionTimer = null; if (a.focused) return b() }, 10) }, b() } }(this)); this.editor.on("valuechanged", function (a) { return function () { var c; a.lastCaretPosition = null; c = a.editor.body.children().filter(function (c, b) { return a.editor.util.isBlockNode(b) }); a.focused && 0 === c.length && (a.editor.selection.save(), a.editor.formatter.format(), a.editor.selection.restore()); a.editor.body.find("hr, pre, .simditor-table").each(function (c, b) { var d, f; d = g(b); if (d.parent().is("blockquote") || d.parent()[0] === a.editor.body[0]) if (f = !1, 0 === d.next().length && (g("\x3cp/\x3e").append(a.editor.util.phBr).insertAfter(d), f = !0), 0 === d.prev().length && (g("\x3cp/\x3e").append(a.editor.util.phBr).insertBefore(d), f = !0), f) return a.throttledValueChanged() }); a.editor.body.find("pre:empty").append(a.editor.util.phBr); if (!a.editor.util.support.onselectionchange && a.focused) return a.throttledSelectionChanged() } }(this)); this.editor.body.on("keydown", g.proxy(this._onKeyDown, this)).on("keypress", g.proxy(this._onKeyPress, this)).on("keyup", g.proxy(this._onKeyUp, this)).on("mouseup", g.proxy(this._onMouseUp, this)).on("focus", g.proxy(this._onFocus, this)).on("blur", g.proxy(this._onBlur, this)).on("drop", g.proxy(this._onDrop, this)).on("input", g.proxy(this._onInput, this)); this.editor.util.browser.firefox && (this.editor.hotkeys.add("cmd+left", function (a) { return function (c) { c.preventDefault(); a.editor.selection._selection.modify("move", "backward", "lineboundary"); return !1 } }(this)), this.editor.hotkeys.add("cmd+right", function (a) { return function (c) { c.preventDefault(); a.editor.selection._selection.modify("move", "forward", "lineboundary"); return !1 } }(this)), a = this.editor.util.os.mac ? "cmd+a" : "ctrl+a", this.editor.hotkeys.add(a, function (a) { return function (c) { var b, d; b = a.editor.body.children(); if (0 < b.length) return c = b.first().get(0), b = b.last().get(0), d = document.createRange(), d.setStart(c, 0), d.setEnd(b, a.editor.util.getNodeLength(b)), a.editor.selection.range(d), !1 } }(this))); return this.editor.hotkeys.add(this.editor.util.os.mac ? "cmd+enter" : "ctrl+enter", function (a) { return function (c) { a.editor.el.closest("form").find("button:submit").click(); return !1 } }(this)) }; b.prototype._onFocus = function (a) { if (!this.editor.clipboard.pasting) return this.editor.el.addClass("focus").removeClass("error"), this.focused = !0, setTimeout(function (a) { return function () { var c, b; b = a.editor.selection._selection.getRangeAt(0); b.startContainer === a.editor.body[0] && (a.lastCaretPosition ? a.editor.undoManager.caretPosition(a.lastCaretPosition) : (c = a.editor.body.children().first(), b = document.createRange(), a.editor.selection.setRangeAtStartOf(c, b))); a.lastCaretPosition = null; a.editor.triggerHandler("focus"); if (!a.editor.util.support.onselectionchange) return a.throttledSelectionChanged() } }(this), 0) }; b.prototype._onBlur = function (a) { var c; if (!this.editor.clipboard.pasting) return this.editor.el.removeClass("focus"), this.editor.sync(), this.focused = !1, this.lastCaretPosition = null != (c = this.editor.undoManager.currentState()) ? c.caret : void 0, this.editor.triggerHandler("blur") }; b.prototype._onMouseUp = function (a) { if (!this.editor.util.support.onselectionchange) return this.throttledSelectionChanged() }; b.prototype._onKeyDown = function (a) { var c, b; if (!1 === this.editor.triggerHandler(a)) return !1; if (!this.editor.hotkeys.respondTo(a)) { if (this.editor.keystroke.respondTo(a)) return this.throttledValueChanged(), !1; if (!((c = a.which, 0 <= y.call(this._modifierKeys, c)) || (b = a.which, 0 <= y.call(this._arrowKeys, b)) || this.editor.util.metaKey(a) && 86 === a.which)) return this.editor.util.support.oninput || this.throttledValueChanged(["typing"]), null } }; b.prototype._onKeyPress = function (a) { if (!1 === this.editor.triggerHandler(a)) return !1 }; b.prototype._onKeyUp = function (a) { var c; if (!1 === this.editor.triggerHandler(a)) return !1; !this.editor.util.support.onselectionchange && (c = a.which, 0 <= y.call(this._arrowKeys, c)) ? this.throttledValueChanged() : 8 !== a.which && 46 !== a.which || !this.editor.util.isEmptyNode(this.editor.body) || (this.editor.body.empty(), a = g("\x3cp/\x3e").append(this.editor.util.phBr).appendTo(this.editor.body), this.editor.selection.setRangeAtStartOf(a)) }; b.prototype._onDrop = function (a) { return !1 === this.editor.triggerHandler(a) ? !1 : this.throttledValueChanged() }; b.prototype._onInput = function (a) { return this.throttledValueChanged(["oninput"]) }; return b }(p); H = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.pluginName = "Keystroke"; b.prototype._init = function () { this.editor = this._module; this._keystrokeHandlers = {}; return this._initKeystrokeHandlers() }; b.prototype.add = function (a, c, b) { a = a.toLowerCase(); a = this.editor.hotkeys.constructor.aliases[a] || a; this._keystrokeHandlers[a] || (this._keystrokeHandlers[a] = {}); return this._keystrokeHandlers[a][c] = b }; b.prototype.respondTo = function (a) { var c, b, e, f; if ((b = null != (e = this.editor.hotkeys.constructor.keyNameMap[a.which]) ? e.toLowerCase() : void 0) && b in this._keystrokeHandlers && ((f = "function" === typeof (c = this._keystrokeHandlers[b])["*"] ? c["*"](a) : void 0) || this.editor.selection.startNodes().each(function (c) { return function (d, e) { var l, k; if (e.nodeType === Node.ELEMENT_NODE && (l = null != (k = c._keystrokeHandlers[b]) ? k[e.tagName.toLowerCase()] : void 0, f = "function" === typeof l ? l(a, g(e)) : void 0, !0 === f || !1 === f)) return !1 } }(this)), f)) return !0 }; b.prototype._initKeystrokeHandlers = function () { var a; this.editor.util.browser.safari && this.add("enter", "*", function (a) { return function (c) { var b; if (c.shiftKey && (c = a.editor.selection.blockNodes().last(), !c.is("pre"))) return b = g("\x3cbr/\x3e"), a.editor.selection.rangeAtEndOf(c) ? (a.editor.selection.insertNode(b), a.editor.selection.insertNode(g("\x3cbr/\x3e")), a.editor.selection.setRangeBefore(b)) : a.editor.selection.insertNode(b), !0 } }(this)); if (this.editor.util.browser.webkit || this.editor.util.browser.msie) a = function (a) { return function (c, b) { var d; if (a.editor.selection.rangeAtEndOf(b)) return d = g("\x3cp/\x3e").append(a.editor.util.phBr).insertAfter(b), a.editor.selection.setRangeAtStartOf(d), !0 } }(this), this.add("enter", "h1", a), this.add("enter", "h2", a), this.add("enter", "h3", a), this.add("enter", "h4", a), this.add("enter", "h5", a), this.add("enter", "h6", a); this.add("backspace", "*", function (a) { return function (c) { var b; b = a.editor.selection.rootNodes().first(); c = b.prev(); if (c.is("hr") && a.editor.selection.rangeAtStartOf(b)) return a.editor.selection.save(), c.remove(), a.editor.selection.restore(), !0; c = a.editor.selection.blockNodes().last(); if (a.editor.util.browser.webkit && a.editor.selection.rangeAtStartOf(c)) return a.editor.selection.save(), a.editor.formatter.cleanNode(c, !0), a.editor.selection.restore(), null } }(this)); this.add("enter", "li", function (a) { return function (c, b) { var d, e, k; d = b.clone(); d.find("ul, ol").remove(); if (a.editor.util.isEmptyNode(d) && b.is(a.editor.selection.blockNodes().last())) { d = b.parent(); if (0 < b.next("li").length) { if (!a.editor.util.isEmptyNode(b)) return; 0 < d.parent("li").length ? (e = g("\x3cli/\x3e").append(a.editor.util.phBr).insertAfter(d.parent("li")), k = g("\x3c" + d[0].tagName + "/\x3e").append(b.nextAll("li")), e.append(k)) : (e = g("\x3cp/\x3e").append(a.editor.util.phBr).insertAfter(d), k = g("\x3c" + d[0].tagName + "/\x3e").append(b.nextAll("li")), e.after(k)) } else 0 < d.parent("li").length ? (e = g("\x3cli/\x3e").insertAfter(d.parent("li")), 0 < b.contents().length ? e.append(b.contents()) : e.append(a.editor.util.phBr)) : (e = g("\x3cp/\x3e").append(a.editor.util.phBr).insertAfter(d), 0 < b.children("ul, ol").length && e.after(b.children("ul, ol"))); b.prev("li").length ? b.remove() : d.remove(); a.editor.selection.setRangeAtStartOf(e); return !0 } } }(this)); this.add("enter", "pre", function (a) { return function (c, b) { var d, e; c.preventDefault(); if (c.shiftKey) return d = g("\x3cp/\x3e").append(a.editor.util.phBr).insertAfter(b), a.editor.selection.setRangeAtStartOf(d), !0; e = a.editor.selection.range(); e.deleteContents(); !a.editor.util.browser.msie && a.editor.selection.rangeAtEndOf(b) ? (d = document.createTextNode("\n\n"), e.insertNode(d), e.setEnd(d, 1)) : (d = document.createTextNode("\n"), e.insertNode(d), e.setStartAfter(d)); e.collapse(!1); a.editor.selection.range(e); return !0 } }(this)); this.add("enter", "blockquote", function (a) { return function (c, b) { var d, e; d = a.editor.selection.blockNodes().last(); if (d.is("p") && !d.next().length && a.editor.util.isEmptyNode(d)) return b.after(d), e = document.createRange(), a.editor.selection.setRangeAtStartOf(d, e), !0 } }(this)); this.add("backspace", "li", function (a) { return function (c, b) { var d, e, k, m, v, h; d = b.children("ul, ol"); e = b.prev("li"); if (!(0 < d.length && 0 < e.length)) return !1; h = ""; m = null; b.contents().each(function (a, c) { if (1 === c.nodeType && /UL|OL/.test(c.nodeName)) return !1; if (1 !== c.nodeType || !/BR/.test(c.nodeName)) return 3 === c.nodeType && c.nodeValue ? h += c.nodeValue : 1 === c.nodeType && (h += g(c).text()), m = g(c) }); k = a.editor.util.browser.firefox && !m.next("br").length; if (m && 1 === h.length && k) return d = g(a.editor.util.phBr).insertAfter(m), m.remove(), a.editor.selection.setRangeBefore(d), !0; if (0 < h.length) return !1; v = document.createRange(); k = e.children("ul, ol"); 0 < k.length ? (e = g("\x3cli/\x3e").append(a.editor.util.phBr).appendTo(k), k.append(d.children("li")), b.remove(), a.editor.selection.setRangeAtEndOf(e, v)) : (a.editor.selection.setRangeAtEndOf(e, v), e.append(d), b.remove(), a.editor.selection.range(v)); return !0 } }(this)); this.add("backspace", "pre", function (a) { return function (c, b) { var d, e; if (a.editor.selection.rangeAtStartOf(b)) return d = b.html().replace("\n", "\x3cbr/\x3e") || a.editor.util.phBr, d = g("\x3cp/\x3e").append(d).insertAfter(b), b.remove(), e = document.createRange(), a.editor.selection.setRangeAtStartOf(d, e), !0 } }(this)); return this.add("backspace", "blockquote", function (a) { return function (c, b) { var d, e; if (a.editor.selection.rangeAtStartOf(b)) return d = b.children().first().unwrap(), e = document.createRange(), a.editor.selection.setRangeAtStartOf(d, e), !0 } }(this)) }; return b }(p); L = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.pluginName = "UndoManager"; b.prototype._index = -1; b.prototype._capacity = 20; b.prototype._startPosition = null; b.prototype._endPosition = null; b.prototype._init = function () { var a, c; this.editor = this._module; this._stack = []; this.editor.util.os.mac ? (c = "cmd+z", a = "shift+cmd+z") : this.editor.util.os.win ? (c = "ctrl+z", a = "ctrl+y") : (c = "ctrl+z", a = "shift+ctrl+z"); this.editor.hotkeys.add(c, function (a) { return function (c) { c.preventDefault(); a.undo(); return !1 } }(this)); this.editor.hotkeys.add(a, function (a) { return function (c) { c.preventDefault(); a.redo(); return !1 } }(this)); this.throttledPushState = this.editor.util.throttle(function (a) { return function () { return a._pushUndoState() } }(this), 2E3); this.editor.on("valuechanged", function (a) { return function (c, b) { if ("undo" !== b && "redo" !== b) return a.throttledPushState() } }(this)); this.editor.on("selectionchanged", function (a) { return function (c) { return a.resetCaretPosition() } }(this)); this.editor.on("focus", function (a) { return function (c) { if (0 === a._stack.length) return a._pushUndoState() } }(this)); return this.editor.on("blur", function (a) { return function (c) { return a.resetCaretPosition() } }(this)) }; b.prototype.resetCaretPosition = function () { return this._endPosition = this._startPosition = null }; b.prototype.startPosition = function () { this.editor.selection._range && (this._startPosition || (this._startPosition = this._getPosition("start"))); return this._startPosition }; b.prototype.endPosition = function () { this.editor.selection._range && (this._endPosition || (this._endPosition = function (a) { return function () { return a.editor.selection.range().collapsed ? a._startPosition : a._getPosition("end") } }(this)())); return this._endPosition }; b.prototype._pushUndoState = function () { if (!1 !== this.editor.triggerHandler("pushundostate") && this.caretPosition().start && (this._index += 1, this._stack.length = this._index, this._stack.push({ html: this.editor.body.html(), caret: this.caretPosition() }), this._stack.length > this._capacity)) return this._stack.shift(), --this._index }; b.prototype.currentState = function () { return this._stack.length && -1 < this._index ? this._stack[this._index] : null }; b.prototype.undo = function () { var a; if (!(1 > this._index || 2 > this._stack.length)) return this.editor.hidePopover(), --this._index, a = this._stack[this._index], this.editor.body.html(a.html), this.caretPosition(a.caret), this.editor.body.find(".selected").removeClass("selected"), this.editor.sync(), this.editor.trigger("valuechanged", ["undo"]) }; b.prototype.redo = function () { var a; if (!(0 > this._index || this._stack.length < this._index + 2)) return this.editor.hidePopover(), this._index += 1, a = this._stack[this._index], this.editor.body.html(a.html), this.caretPosition(a.caret), this.editor.body.find(".selected").removeClass("selected"), this.editor.sync(), this.editor.trigger("valuechanged", ["redo"]) }; b.prototype.update = function () { var a, c; if (a = this.currentState()) return c = this.editor.body.html(), a.html = c, a.caret = this.caretPosition() }; b.prototype._getNodeOffset = function (a, c) { var b, e, f; b = g.isNumeric(c) ? g(a) : g(a).parent(); f = 0; e = !1; b.contents().each(function (b, d) { if (a === d || c === b && 0 === b) return !1; d.nodeType === Node.TEXT_NODE ? !e && 0 < d.nodeValue.length && (f += 1, e = !0) : (f += 1, e = !1); return c - 1 === b ? !1 : null }); return f }; b.prototype._getPosition = function (a) { var c, b, e, f; null == a && (a = "start"); b = this.editor.selection.range()[a + "Offset"]; c = this.editor.selection[a + "Nodes"](); a = c.first()[0]; if (a.nodeType === Node.TEXT_NODE) { for (f = a.previousSibling; f && f.nodeType === Node.TEXT_NODE;) a = f, b += this.editor.util.getNodeLength(f), f = f.previousSibling; c = c.get(); c[0] = a; c = g(c) } else b = this._getNodeOffset(a, b); e = [b]; c.each(function (a) { return function (c, b) { return e.unshift(a._getNodeOffset(b)) } }(this)); return e }; b.prototype._getNodeByPosition = function (a) { var c, b, e, f, l, k, m; l = this.editor.body[0]; m = a.slice(0, a.length - 1); b = e = 0; for (f = m.length; e < f; b = ++e) { k = m[b]; c = l.childNodes; if (k > c.length - 1) if (b === a.length - 2 && g(l).is("pre:empty")) c = document.createTextNode(""), l.appendChild(c), c = l.childNodes; else { l = null; break } l = c[k] } return l }; b.prototype.caretPosition = function (a) { var c, b, e, f; if (a) { if (a.start) { e = this._getNodeByPosition(a.start); f = a.start[a.start.length - 1]; a.collapsed ? (c = e, a = f) : (c = this._getNodeByPosition(a.end), a = a.start[a.start.length - 1]); if (e && c) return b = document.createRange(), b.setStart(e, f), b.setEnd(c, a), this.editor.selection.range(b); "undefined" !== typeof console && null !== console && "function" === typeof console.warn && console.warn("simditor: invalid caret state") } } else return b = this.editor.selection.range(), a = this.editor.inputManager.focused && null != b ? { start: this.startPosition(), end: this.endPosition(), collapsed: b.collapsed } : {} }; return b }(p); M = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.pluginName = "Util"; b.prototype._init = function () { this.editor = this._module; if (this.browser.msie && 11 > this.browser.version) return this.phBr = "" }; b.prototype.phBr = "\x3cbr/\x3e"; b.prototype.os = function () { var a; a = {}; /Mac/.test(navigator.appVersion) ? a.mac = !0 : /Linux/.test(navigator.appVersion) ? a.linux = !0 : /Win/.test(navigator.appVersion) ? a.win = !0 : /X11/.test(navigator.appVersion) && (a.unix = !0); /Mobi/.test(navigator.appVersion) && (a.mobile = !0); return a }(); b.prototype.browser = function () { var a, c, b, e, f, g, k, m, v, h, u; u = navigator.userAgent; e = /(msie|trident)/i.test(u); a = /chrome|crios/i.test(u); h = /safari/i.test(u) && !a; b = /firefox/i.test(u); c = /edge/i.test(u); return e ? { msie: !0, version: 1 * (null != (f = u.match(/(msie |rv:)(\d+(\.\d+)?)/i)) ? f[2] : NaN) } : c ? { edge: !0, webkit: !0, version: 1 * (null != (g = u.match(/edge\/(\d+(\.\d+)?)/i)) ? g[1] : NaN) } : a ? { webkit: !0, chrome: !0, version: 1 * (null != (k = u.match(/(?:chrome|crios)\/(\d+(\.\d+)?)/i)) ? k[1] : NaN) } : h ? { webkit: !0, safari: !0, version: 1 * (null != (m = u.match(/version\/(\d+(\.\d+)?)/i)) ? m[1] : NaN) } : b ? { mozilla: !0, firefox: !0, version: 1 * (null != (v = u.match(/firefox\/(\d+(\.\d+)?)/i)) ? v[1] : NaN) } : {} }(); b.prototype.support = function () { var a; a: { var c; c = document.onselectionchange; if (void 0 !== c) try { document.onselectionchange = 0; a = null === document.onselectionchange; break a } catch (d) { } finally { document.onselectionchange = c } a = !1 } return { onselectionchange: a, oninput: !/(msie|trident)/i.test(navigator.userAgent) } }(); b.prototype.reflow = function (a) { null == a && (a = document); return g(a)[0].offsetHeight }; b.prototype.metaKey = function (a) { return /Mac/.test(navigator.userAgent) ? a.metaKey : a.ctrlKey }; b.prototype.isEmptyNode = function (a) { a = g(a); return a.is(":empty") || !a.text() && !a.find(":not(br, span, div)").length }; b.prototype.isDecoratedNode = function (a) { return g(a).is('[class^\x3d"simditor-"]') }; b.prototype.blockNodes = "div p ul ol li blockquote hr pre h1 h2 h3 h4 h5 table".split(" "); b.prototype.isBlockNode = function (a) { return (a = g(a)[0]) && 3 !== a.nodeType ? (new RegExp("^(" + this.blockNodes.join("|") + ")$")).test(a.nodeName.toLowerCase()) : !1 }; b.prototype.getNodeLength = function (a) { a = g(a)[0]; switch (a.nodeType) { case 7: case 10: return 0; case 3: case 8: return a.length; default: return a.childNodes.length } }; b.prototype.dataURLtoBlob = function (a) { var c, b, e, f, g, k, m, v, h; if (b = window.Blob) try { b = !!new Blob } catch (u) { b = !1 } if (b = (e = b) && window.Uint8Array) try { b = 100 === (new Blob([new Uint8Array(100)])).size } catch (u) { b = !1 } g = b; c = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder; if (!((e || c) && window.atob && window.ArrayBuffer && window.Uint8Array)) return !1; f = 0 <= a.split(",")[0].indexOf("base64") ? atob(a.split(",")[1]) : decodeURIComponent(a.split(",")[1]); b = new ArrayBuffer(f.length); m = new Uint8Array(b); k = v = 0; for (h = f.length; 0 <= h ? v <= h : v >= h; k = 0 <= h ? ++v : --v) m[k] = f.charCodeAt(k); a = a.split(",")[0].split(":")[1].split(";")[0]; if (e) return new Blob([g ? m : b], { type: a }); e = new c; e.append(b); return e.getBlob(a) }; b.prototype.throttle = function (a, c) { var b, e, f, g, k, m, h; h = g = 0; f = b = k = null; e = function () { h = 0; g = +new Date; k = a.apply(f, b); return b = f = null }; m = function () { var a; f = this; b = arguments; a = new Date - g; h || (a >= c ? e() : h = setTimeout(e, c - a)); return k }; m.clear = function () { if (h) return clearTimeout(h), e() }; return m }; b.prototype.formatHTML = function (a) { var c, b, e, f, l, k, m, h; l = /<(\/?)(.+?)(\/?)>/g; m = ""; e = 0; b = null; for (k = function (a, c) { return Array(c + 1).join(a) }; null !== (f = l.exec(a)) ;) f.isBlockNode = -1 < g.inArray(f[2], this.blockNodes), f.isStartTag = "/" !== f[1] && "/" !== f[3], f.isEndTag = "/" === f[1] || "/" === f[3], c = b ? b.index + b[0].length : 0, 0 < (h = a.substring(c, f.index)).length && g.trim(h) && (m += h), f.isBlockNode && f.isEndTag && !f.isStartTag && --e, f.isBlockNode && f.isStartTag && (b && b.isBlockNode && b.isEndTag || (m += "\n"), m += k("  ", e)), m += f[0], f.isBlockNode && f.isEndTag && (m += "\n"), f.isBlockNode && f.isStartTag && (e += 1), b = f; return g.trim(m) }; return b }(p); K = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.pluginName = "Toolbar"; b.prototype.opts = { toolbar: !0, toolbarFloat: !0, toolbarHidden: !1, toolbarFloatOffset: 0 }; b.prototype._tpl = { wrapper: '\x3cdiv class\x3d"simditor-toolbar"\x3e\x3cul\x3e\x3c/ul\x3e\x3c/div\x3e', separator: '\x3cli\x3e\x3cspan class\x3d"separator"\x3e\x3c/span\x3e\x3c/li\x3e' }; b.prototype._init = function () { var a, c, b; this.editor = this._module; if (this.opts.toolbar) return g.isArray(this.opts.toolbar) || (this.opts.toolbar = "bold italic underline strikethrough | ol ul blockquote code | link image | indent outdent".split(" ")), this._render(), this.list.on("click", function (a) { return !1 }), this.wrapper.on("mousedown", function (a) { return function (c) { return a.list.find(".menu-on").removeClass(".menu-on") } }(this)), g(document).on("mousedown.simditor" + this.editor.id, function (a) { return function (c) { return a.list.find(".menu-on").removeClass(".menu-on") } }(this)), !this.opts.toolbarHidden && this.opts.toolbarFloat && (this.wrapper.css("top", this.opts.toolbarFloatOffset), b = 0, c = function (a) { return function () { a.wrapper.css("position", "static"); a.wrapper.width("auto"); a.editor.util.reflow(a.wrapper); a.wrapper.width(a.wrapper.outerWidth()); a.wrapper.css("left", a.editor.util.os.mobile ? a.wrapper.position().left : a.wrapper.offset().left); a.wrapper.css("position", ""); b = a.wrapper.outerHeight(); a.editor.placeholderEl.css("top", b); return !0 } }(this), a = null, g(window).on("resize.simditor-" + this.editor.id, function (b) { return a = c() }), g(window).on("scroll.simditor-" + this.editor.id, function (d) { return function (f) { var e, k; if (d.wrapper.is(":visible")) if (k = d.editor.wrapper.offset().top, f = k + d.editor.wrapper.outerHeight() - 80, e = g(document).scrollTop() + d.opts.toolbarFloatOffset, e <= k || e >= f) { if (d.editor.wrapper.removeClass("toolbar-floating").css("padding-top", ""), d.editor.util.os.mobile) return d.wrapper.css("top", d.opts.toolbarFloatOffset) } else if (a || (a = c()), d.editor.wrapper.addClass("toolbar-floating").css("padding-top", b), d.editor.util.os.mobile) return d.wrapper.css("top", e - k + d.opts.toolbarFloatOffset) } }(this))), this.editor.on("destroy", function (a) { return function () { return a.buttons.length = 0 } }(this)), g(document).on("mousedown.simditor-" + this.editor.id, function (a) { return function (c) { return a.list.find("li.menu-on").removeClass("menu-on") } }(this)) }; b.prototype._render = function () { var a, c, b, e; this.buttons = []; this.wrapper = g(this._tpl.wrapper).prependTo(this.editor.wrapper); this.list = this.wrapper.find("ul"); e = this.opts.toolbar; a = 0; for (c = e.length; a < c; a++) if (b = e[a], "|" === b) g(this._tpl.separator).appendTo(this.list); else if (this.constructor.buttons[b]) this.buttons.push(new this.constructor.buttons[b]({ editor: this.editor })); else throw Error("simditor: invalid toolbar button " + b); if (this.opts.toolbarHidden) return this.wrapper.hide() }; b.prototype.findButton = function (a) { a = this.list.find(".toolbar-item-" + a).data("button"); return null != a ? a : null }; b.addButton = function (a) { return this.buttons[a.prototype.name] = a }; b.buttons = {}; return b }(p); F = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.pluginName = "Indentation"; b.prototype.opts = { tabIndent: !0 }; b.prototype._init = function () { this.editor = this._module; return this.editor.keystroke.add("tab", "*", function (a) { return function (b) { var c; c = a.editor.toolbar.findButton("code"); if (a.opts.tabIndent || c && c.active) return a.indent(b.shiftKey) } }(this)) }; b.prototype.indent = function (a) { var b, d, e; this.editor.selection.startNodes(); this.editor.selection.endNodes(); b = this.editor.selection.blockNodes(); d = []; b = b.each(function (a, b) { var c, f, e, l, h; c = !0; f = e = 0; for (l = d.length; e < l; f = ++e) if (h = d[f], g.contains(b, h)) { c = !1; break } else if (g.contains(h, b)) { d.splice(f, 1, b); c = !1; break } if (c) return d.push(b) }); b = g(d); e = !1; b.each(function (b) { return function (c, d) { var f; if (f = a ? b.outdentBlock(d) : b.indentBlock(d)) return e = f } }(this)); return e }; b.prototype.indentBlock = function (a) { var b, d, e; a = g(a); if (a.length) { if (a.is("pre")) { b = this.editor.selection.containerNode(); if (!b.is(a) && !b.closest("pre").is(a)) return; this.indentText(this.editor.selection.range()) } else if (a.is("li")) { d = a.prev("li"); if (1 > d.length) return; this.editor.selection.save(); e = a.parent()[0].tagName; b = d.children("ul, ol"); 0 < b.length ? b.append(a) : g("\x3c" + e + "/\x3e").append(a).appendTo(d); this.editor.selection.restore() } else if (a.is("p, h1, h2, h3, h4")) b = parseInt(a.css("margin-left")) || 0, b = (Math.round(b / this.opts.indentWidth) + 1) * this.opts.indentWidth, a.css("margin-left", b); else if (a.is("table") || a.is(".simditor-table")) { a = this.editor.selection.containerNode().closest("td, th"); b = a.next("td, th"); 0 < b.length || (d = a.parent("tr"), b = d.next("tr"), 1 > b.length && d.parent().is("thead") && (b = d.parent("thead").next("tbody").find("tr:first")), b = b.find("td:first, th:first")); if (!(0 < a.length && 0 < b.length)) return; this.editor.selection.setRangeAtEndOf(b) } else return !1; return !0 } }; b.prototype.indentText = function (a) { var b, d; b = a.toString().replace(/^(?=.+)/mg, "\u00a0\u00a0"); d = document.createTextNode(b || "\u00a0\u00a0"); a.deleteContents(); a.insertNode(d); return b ? (a.selectNode(d), this.editor.selection.range(a)) : this.editor.selection.setRangeAfter(d) }; b.prototype.outdentBlock = function (a) { var b, d; if ((a = g(a)) && 0 < a.length) { if (a.is("pre")) { b = this.editor.selection.containerNode(); if (!b.is(a) && !b.closest("pre").is(a)) return; this.outdentText(d) } else if (a.is("li")) b = a.parent(), d = b.parent("li"), this.editor.selection.save(), 1 > d.length ? (d = document.createRange(), d.setStartBefore(b[0]), d.setEndBefore(a[0]), b.before(d.extractContents()), g("\x3cp/\x3e").insertBefore(b).after(a.children("ul, ol")).append(a.contents()), a.remove()) : (0 < a.next("li").length && g("\x3c" + b[0].tagName + "/\x3e").append(a.nextAll("li")).appendTo(a), a.insertAfter(d), 1 > b.children("li").length && b.remove()), this.editor.selection.restore(); else if (a.is("p, h1, h2, h3, h4")) d = parseInt(a.css("margin-left")) || 0, d = Math.max(Math.round(d / this.opts.indentWidth) - 1, 0) * this.opts.indentWidth, a.css("margin-left", 0 === d ? "" : d); else if (a.is("table") || a.is(".simditor-table")) { a = this.editor.selection.containerNode().closest("td, th"); d = a.prev("td, th"); 0 < d.length || (b = a.parent("tr"), d = b.prev("tr"), 1 > d.length && b.parent().is("tbody") && (d = b.parent("tbody").prev("thead").find("tr:first")), d = d.find("td:last, th:last")); if (!(0 < a.length && 0 < d.length)) return; this.editor.selection.setRangeAtEndOf(d) } else return !1; return !0 } }; b.prototype.outdentText = function (a) { }; return b }(p); B = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.pluginName = "Clipboard"; b.prototype.opts = { pasteImage: !1 }; b.prototype._init = function () { this.editor = this._module; this.opts.pasteImage && "string" !== typeof this.opts.pasteImage && (this.opts.pasteImage = "inline"); return this.editor.body.on("paste", function (a) { return function (b) { var c; if (!a.pasting && !a._pasteBin) { if (!1 === a.editor.triggerHandler(b)) return !1; c = a.editor.selection.deleteRangeContents(); a.editor.body.html() ? c.collapsed || c.collapse(!0) : (a.editor.formatter.format(), a.editor.selection.setRangeAtStartOf(a.editor.body.find("p:first"))); if (a._processPasteByClipboardApi(b)) return !1; a.editor.inputManager.throttledValueChanged.clear(); a.editor.inputManager.throttledSelectionChanged.clear(); a.editor.undoManager.throttledPushState.clear(); a.editor.selection.reset(); a.editor.undoManager.resetCaretPosition(); a.pasting = !0; return a._getPasteContent(function (b) { a._processPasteContent(b); a._pasteInBlockEl = null; a._pastePlainText = null; return a.pasting = !1 }) } } }(this)) }; b.prototype._processPasteByClipboardApi = function (a) { var b, d; if (!this.editor.util.browser.edge && a.originalEvent.clipboardData && a.originalEvent.clipboardData.items && 0 < a.originalEvent.clipboardData.items.length && (a = a.originalEvent.clipboardData.items[0], /^image\//.test(a.type) && (a = a.getAsFile(), null != a && this.opts.pasteImage && (a.name || (a.name = "Clipboard Image.png"), !1 !== this.editor.triggerHandler("pasting", [a]))))) return d = {}, d[this.opts.pasteImage] = !0, null != (b = this.editor.uploader) && b.upload(a, d), !0 }; b.prototype._getPasteContent = function (a) { var b, d; this._pasteBin = g('\x3cdiv contenteditable\x3d"true" /\x3e').addClass("simditor-paste-bin").attr("tabIndex", "-1").appendTo(this.editor.el); b = this.editor.body.html(); d = this.editor.undoManager.caretPosition(); this._pasteBin.focus(); return setTimeout(function (c) { return function () { var f; c.editor.hidePopover(); c.editor.body.html(b); c.editor.undoManager.caretPosition(d); c.editor.body.focus(); c.editor.selection.reset(); c.editor.selection.range(); c._pasteInBlockEl = c.editor.selection.blockNodes().last(); c._pastePlainText = c._pasteInBlockEl.is("pre, table"); c._pastePlainText ? f = c.editor.formatter.clearHtml(c._pasteBin.html(), !0) : (f = g("\x3cdiv/\x3e").append(c._pasteBin.contents()), f.find("table colgroup").remove(), c.editor.formatter.format(f), c.editor.formatter.decorate(f), c.editor.formatter.beautify(f.children()), f = f.contents()); c._pasteBin.remove(); c._pasteBin = null; return a(f) } }(this), 0) }; b.prototype._processPasteContent = function (a) { var b, d, e, f; if (!1 !== this.editor.triggerHandler("pasting", [a]) && (b = this._pasteInBlockEl, a)) { if (this._pastePlainText) if (b.is("table")) { f = a.split("\n"); a = f.pop(); d = 0; for (b = f.length; d < b; d++) e = f[d], this.editor.selection.insertNode(document.createTextNode(e)), this.editor.selection.insertNode(g("\x3cbr/\x3e")); this.editor.selection.insertNode(document.createTextNode(a)) } else for (a = g("\x3cdiv/\x3e").text(a), e = a.contents(), a = 0, b = e.length; a < b; a++) d = e[a], this.editor.selection.insertNode(g(d)[0]); else if (b.is(this.editor.body)) for (e = 0, b = a.length; e < b; e++) d = a[e], this.editor.selection.insertNode(d); else { if (1 > a.length) return; if (1 === a.length) if (a.is("p")) { a = a.contents(); if (1 === a.length && a.is("img")) { if (/^data:image/.test(a.attr("src"))) { if (!this.opts.pasteImage) return; a = this.editor.util.dataURLtoBlob(a.attr("src")); a.name = "Clipboard Image.png"; b = {}; b[this.opts.pasteImage] = !0; null != (d = this.editor.uploader) && d.upload(a, b); return } if (a.is('img[src^\x3d"webkit-fake-url://"]')) return } e = 0; for (b = a.length; e < b; e++) d = a[e], this.editor.selection.insertNode(d) } else if (b.is("p") && this.editor.util.isEmptyNode(b)) b.replaceWith(a), this.editor.selection.setRangeAtEndOf(a); else if (a.is("ul, ol")) if (1 === a.find("li").length) for (a = g("\x3cdiv/\x3e").text(a.text()), e = a.contents(), b = 0, a = e.length; b < a; b++) d = e[b], this.editor.selection.insertNode(g(d)[0]); else b.is("li") ? b.parent().after(a) : b.after(a), this.editor.selection.setRangeAtEndOf(a); else b.after(a), this.editor.selection.setRangeAtEndOf(a); else b.is("li") && (b = b.parent()), this.editor.selection.rangeAtStartOf(b) ? d = "before" : this.editor.selection.rangeAtEndOf(b) ? d = "after" : (this.editor.selection.breakBlockEl(b), d = "before"), b[d](a), this.editor.selection.setRangeAtEndOf(a.last()) } return this.editor.inputManager.throttledValueChanged() } }; return b }(p); q = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.connect(M); b.connect(G); b.connect(J); b.connect(L); b.connect(H); b.connect(D); b.connect(K); b.connect(F); b.connect(B); b.count = 0; b.prototype.opts = { textarea: null, placeholder: "", defaultImage: "images/image.png", params: {}, upload: !1, indentWidth: 40, height: "300px" }; b.prototype._init = function () { var a; this.textarea = g(this.opts.textarea); this.opts.placeholder = this.opts.placeholder || this.textarea.attr("placeholder"); if (!this.textarea.length) throw Error("simditor: param textarea is required."); a = this.textarea.data("simditor"); null != a && a.destroy(); this.id = ++b.count; this._render(); if (z) { if (this.hotkeys = z({ el: this.body }), this.opts.upload && A && (a = "object" === typeof this.opts.upload ? this.opts.upload : {}, this.uploader = A(a)), a = this.textarea.closest("form"), a.length && (a.on("submit.simditor-" + this.id, function (a) { return function () { return a.sync() } }(this)), a.on("reset.simditor-" + this.id, function (a) { return function () { return a.setValue("") } }(this))), this.on("initialized", function (a) { return function () { if (a.opts.placeholder) a.on("valuechanged", function () { return a._placeholder() }); a.setValue(a.textarea.val().trim() || ""); if (a.textarea.attr("autofocus")) return a.focus() } }(this)), this.util.browser.mozilla) { this.util.reflow(); try { return document.execCommand("enableObjectResizing", !1, !1), document.execCommand("enableInlineTableEditing", !1, !1) } catch (c) { } } } else throw Error("simditor: simple-hotkeys is required."); }; b.prototype._tpl = '\x3cdiv class\x3d"simditor"\x3e\n  \x3cdiv class\x3d"simditor-wrapper"\x3e\n    \x3cdiv class\x3d"simditor-placeholder"\x3e\x3c/div\x3e\n    \x3cdiv class\x3d"simditor-body" contenteditable\x3d"true"\x3e\n    \x3c/div\x3e\n  \x3c/div\x3e\n\x3c/div\x3e'; b.prototype._render = function () { var a, b, d, e; this.el = g(this._tpl).insertBefore(this.textarea); this.wrapper = this.el.find(".simditor-wrapper"); this.body = this.wrapper.find(".simditor-body"); this.opts.height && this.body.css({ height: this.opts.height }); this.placeholderEl = this.wrapper.find(".simditor-placeholder").append(this.opts.placeholder); this.el.data("simditor", this); this.wrapper.append(this.textarea); this.textarea.data("simditor", this).blur(); this.body.attr("tabindex", this.textarea.attr("tabindex")); this.util.os.mac ? this.el.addClass("simditor-mac") : this.util.os.linux && this.el.addClass("simditor-linux"); this.util.os.mobile && this.el.addClass("simditor-mobile"); if (this.opts.params) { b = this.opts.params; d = []; for (a in b) e = b[a], d.push(g("\x3cinput/\x3e", { type: "hidden", name: a, value: e }).insertAfter(this.textarea)); return d } }; b.prototype._placeholder = function () { var a; a = this.body.children(); return 0 === a.length || 1 === a.length && this.util.isEmptyNode(a) && parseInt(a.css("margin-left") || 0) < this.opts.indentWidth ? this.placeholderEl.show() : this.placeholderEl.hide() }; b.prototype.setValue = function (a) { this.hidePopover(); this.textarea.val(a); this.body.html(a); this.formatter.format(); this.formatter.decorate(); this.util.reflow(this.body); this.inputManager.lastCaretPosition = null; return this.trigger("valuechanged") }; b.prototype.getValue = function () { return this.sync() }; b.prototype.sync = function () { var a, b, d, e; b = this.body.clone(); this.formatter.undecorate(b); this.formatter.format(b); this.formatter.autolink(b); a = b.children(); e = a.last("p"); for (d = a.first("p") ; e.is("p") && this.util.isEmptyNode(e) ;) a = e, e = e.prev("p"), a.remove(); for (; d.is("p") && this.util.isEmptyNode(d) ;) a = d, d = e.next("p"), a.remove(); b.find("img.uploading").remove(); b = g.trim(b.html()); this.textarea.val(b); return b }; b.prototype.focus = function () { var a, b; if (this.body.is(":visible") && this.body.is("[contenteditable]")) { if (this.inputManager.lastCaretPosition) return this.undoManager.caretPosition(this.inputManager.lastCaretPosition), this.inputManager.lastCaretPosition = null; a = this.body.children().last(); a.is("p") || (a = g("\x3cp/\x3e").append(this.util.phBr).appendTo(this.body)); b = document.createRange(); return this.selection.setRangeAtEndOf(a, b) } this.el.find("textarea:visible").focus() }; b.prototype.blur = function () { return this.body.is(":visible") && this.body.is("[contenteditable]") ? this.body.blur() : this.body.find("textarea:visible").blur() }; b.prototype.hidePopover = function () { return this.el.find(".simditor-popover").each(function (a, b) { b = g(b).data("popover"); if (b.active) return b.hide() }) }; b.prototype.destroy = function () { this.triggerHandler("destroy"); this.textarea.closest("form").off(".simditor .simditor-" + this.id); this.selection.clear(); this.inputManager.focused = !1; this.textarea.insertBefore(this.el).hide().val("").removeData("simditor"); this.el.remove(); g(document).off(".simditor-" + this.id); g(window).off(".simditor-" + this.id); return this.off() }; return b }(p); q.i18n = { "zh-CN": { blockquote: "\u5f15\u7528", bold: "\u52a0\u7c97\u6587\u5b57", code: "\u63d2\u5165\u4ee3\u7801", color: "\u6587\u5b57\u989c\u8272", coloredText: "\u5f69\u8272\u6587\u5b57", hr: "\u5206\u9694\u7ebf", image: "\u63d2\u5165\u56fe\u7247", externalImage: "\u5916\u94fe\u56fe\u7247", uploadImage: "\u4e0a\u4f20\u56fe\u7247", uploadFailed: "\u4e0a\u4f20\u5931\u8d25\u4e86", uploadError: "\u4e0a\u4f20\u51fa\u9519\u4e86", imageUrl: "\u56fe\u7247\u5730\u5740", imageSize: "\u56fe\u7247\u5c3a\u5bf8", imageAlt: "\u56fe\u7247\u63cf\u8ff0", restoreImageSize: "\u8fd8\u539f\u56fe\u7247\u5c3a\u5bf8", uploading: "\u6b63\u5728\u4e0a\u4f20", indent: "\u5411\u53f3\u7f29\u8fdb", outdent: "\u5411\u5de6\u7f29\u8fdb", italic: "\u659c\u4f53\u6587\u5b57", link: "\u63d2\u5165\u94fe\u63a5", linkText: "\u94fe\u63a5\u6587\u5b57", linkUrl: "\u94fe\u63a5\u5730\u5740", linkTarget: "\u6253\u5f00\u65b9\u5f0f", openLinkInCurrentWindow: "\u5728\u65b0\u7a97\u53e3\u4e2d\u6253\u5f00", openLinkInNewWindow: "\u5728\u5f53\u524d\u7a97\u53e3\u4e2d\u6253\u5f00", removeLink: "\u79fb\u9664\u94fe\u63a5", ol: "\u6709\u5e8f\u5217\u8868", ul: "\u65e0\u5e8f\u5217\u8868", strikethrough: "\u5220\u9664\u7ebf\u6587\u5b57", table: "\u8868\u683c", deleteRow: "\u5220\u9664\u884c", insertRowAbove: "\u5728\u4e0a\u9762\u63d2\u5165\u884c", insertRowBelow: "\u5728\u4e0b\u9762\u63d2\u5165\u884c", deleteColumn: "\u5220\u9664\u5217", insertColumnLeft: "\u5728\u5de6\u8fb9\u63d2\u5165\u5217", insertColumnRight: "\u5728\u53f3\u8fb9\u63d2\u5165\u5217", deleteTable: "\u5220\u9664\u8868\u683c", title: "\u6807\u9898", normalText: "\u666e\u901a\u6587\u672c", underline: "\u4e0b\u5212\u7ebf\u6587\u5b57", alignment: "\u6c34\u5e73\u5bf9\u9f50", alignCenter: "\u5c45\u4e2d", alignLeft: "\u5c45\u5de6", alignRight: "\u5c45\u53f3", selectLanguage: "\u9009\u62e9\u7a0b\u5e8f\u8bed\u8a00", fontScale: "\u5b57\u4f53\u5927\u5c0f", fontScaleXLarge: "\u8d85\u5927\u5b57\u4f53", fontScaleLarge: "\u5927\u53f7\u5b57\u4f53", fontScaleNormal: "\u6b63\u5e38\u5927\u5c0f", fontScaleSmall: "\u5c0f\u53f7\u5b57\u4f53", fontScaleXSmall: "\u8d85\u5c0f\u5b57\u4f53", letterspace: "\u6587\u5b57\u95f4\u8ddd", lineheight: "\u6587\u5b57\u884c\u9ad8" }, "en-US": { blockquote: "Block Quote", bold: "Bold", code: "Code", color: "Text Color", coloredText: "Colored Text", hr: "Horizontal Line", image: "Insert Image", externalImage: "External Image", uploadImage: "Upload Image", uploadFailed: "Upload failed", uploadError: "Error occurs during upload", imageUrl: "Url", imageSize: "Size", imageAlt: "Alt", restoreImageSize: "Restore Origin Size", uploading: "Uploading", indent: "Indent", outdent: "Outdent", italic: "Italic", link: "Insert Link", linkText: "Text", linkUrl: "Url", linkTarget: "Target", openLinkInCurrentWindow: "Open link in current window", openLinkInNewWindow: "Open link in new window", removeLink: "Remove Link", ol: "Ordered List", ul: "Unordered List", strikethrough: "Strikethrough", table: "Table", deleteRow: "Delete Row", insertRowAbove: "Insert Row Above", insertRowBelow: "Insert Row Below", deleteColumn: "Delete Column", insertColumnLeft: "Insert Column Left", insertColumnRight: "Insert Column Right", deleteTable: "Delete Table", title: "Title", normalText: "Text", underline: "Underline", alignment: "Alignment", alignCenter: "Align Center", alignLeft: "Align Left", alignRight: "Align Right", selectLanguage: "Select Language", fontScale: "Font Size", fontScaleXLarge: "X Large Size", fontScaleLarge: "Large Size", fontScaleNormal: "Normal Size", fontScaleSmall: "Small Size", fontScaleXSmall: "X Small Size", letterspace: "Letter Space", lineheight: "Line Height" } }; t = function (h) { function b(a) { this.editor = a.editor; this.title = this._t(this.name); b.__super__.constructor.call(this, a) } n(b, h); b.prototype._tpl = { item: '\x3cli\x3e\x3ca tabindex\x3d"-1" unselectable\x3d"on" class\x3d"toolbar-item" href\x3d"javascript:;"\x3e\x3cspan\x3e\x3c/span\x3e\x3c/a\x3e\x3c/li\x3e', menuWrapper: '\x3cdiv class\x3d"toolbar-menu"\x3e\x3c/div\x3e', menuItem: '\x3cli\x3e\x3ca tabindex\x3d"-1" unselectable\x3d"on" class\x3d"menu-item" href\x3d"javascript:;"\x3e\x3cspan\x3e\x3c/span\x3e\x3c/a\x3e\x3c/li\x3e', separator: '\x3cli\x3e\x3cspan class\x3d"separator"\x3e\x3c/span\x3e\x3c/li\x3e' }; b.prototype.name = ""; b.prototype.icon = ""; b.prototype.title = ""; b.prototype.text = ""; b.prototype.htmlTag = ""; b.prototype.disableTag = ""; b.prototype.menu = !1; b.prototype.active = !1; b.prototype.disabled = !1; b.prototype.needFocus = !0; b.prototype.shortcut = null; b.prototype._init = function () { var a, b, d, e; this.render(); this.el.on("mousedown", function (a) { return function (b) { b.preventDefault(); b = a.needFocus && !a.editor.inputManager.focused; if (a.el.hasClass("disabled") || b) return !1; if (a.menu) return a.wrapper.toggleClass("menu-on").siblings("li").removeClass("menu-on"), a.wrapper.is(".menu-on") && (b = a.menuWrapper.offset().left + a.menuWrapper.outerWidth() + 5 - a.editor.wrapper.offset().left - a.editor.wrapper.outerWidth(), 0 < b && a.menuWrapper.css({ left: "auto", right: 0 }), a.trigger("menuexpand")), !1; b = a.el.data("param"); a.command(b); return !1 } }(this)); this.wrapper.on("click", "a.menu-item", function (a) { return function (b) { var c; b.preventDefault(); b = g(b.currentTarget); a.wrapper.removeClass("menu-on"); c = a.needFocus && !a.editor.inputManager.focused; if (b.hasClass("disabled") || c) return !1; a.editor.toolbar.wrapper.removeClass("menu-on"); b = b.data("param"); a.command(b); return !1 } }(this)); this.wrapper.on("mousedown", "a.menu-item", function (a) { return !1 }); this.editor.on("blur", function (a) { return function () { if (a.editor.body.is(":visible") && a.editor.body.is("[contenteditable]") && !a.editor.clipboard.pasting) return a.setActive(!1), a.setDisabled(!1) } }(this)); null != this.shortcut && this.editor.hotkeys.add(this.shortcut, function (a) { return function (b) { a.el.mousedown(); return !1 } }(this)); d = this.htmlTag.split(","); a = 0; for (b = d.length; a < b; a++) e = d[a], (e = g.trim(e)) && 0 > g.inArray(e, this.editor.formatter._allowedTags) && this.editor.formatter._allowedTags.push(e); return this.editor.on("selectionchanged", function (a) { return function (b) { if (a.editor.inputManager.focused) return a._status() } }(this)) }; b.prototype.iconClassOf = function (a) { return a ? "simditor-icon simditor-icon-" + a : "" }; b.prototype.setIcon = function (a) { return this.el.find("span").removeClass().addClass(this.iconClassOf(a)).text(this.text) }; b.prototype.render = function () { this.wrapper = g(this._tpl.item).appendTo(this.editor.toolbar.list); this.el = this.wrapper.find("a.toolbar-item"); this.el.attr("title", this.title).addClass("toolbar-item-" + this.name).data("button", this); this.setIcon(this.icon); if (this.menu) return this.menuWrapper = g(this._tpl.menuWrapper).appendTo(this.wrapper), this.menuWrapper.addClass("toolbar-menu-" + this.name), this.renderMenu() }; b.prototype.renderMenu = function () { var a, b, d, e, f, l, k; if (g.isArray(this.menu)) { this.menuEl = g("\x3cul/\x3e").appendTo(this.menuWrapper); f = this.menu; k = []; b = 0; for (d = f.length; b < d; b++) e = f[b], "|" === e ? g(this._tpl.separator).appendTo(this.menuEl) : (a = g(this._tpl.menuItem).appendTo(this.menuEl), a = a.find("a.menu-item").attr({ title: null != (l = e.title) ? l : e.text, "data-param": e.param }).addClass("menu-item-" + e.name), e.icon ? k.push(a.find("span").addClass(this.iconClassOf(e.icon))) : k.push(a.find("span").text(e.text))); return k } }; b.prototype.setActive = function (a) { if (a !== this.active) return this.active = a, this.el.toggleClass("active", this.active) }; b.prototype.setDisabled = function (a) { if (a !== this.disabled) return this.disabled = a, this.el.toggleClass("disabled", this.disabled) }; b.prototype._disableStatus = function () { var a, b; b = this.editor.selection.startNodes(); a = this.editor.selection.endNodes(); a = 0 < b.filter(this.disableTag).length || 0 < a.filter(this.disableTag).length; this.setDisabled(a); this.disabled && this.setActive(!1); return this.disabled }; b.prototype._activeStatus = function () { var a, b; b = this.editor.selection.startNodes(); a = this.editor.selection.endNodes(); b = b.filter(this.htmlTag); a = a.filter(this.htmlTag); this.node = (a = 0 < b.length && 0 < a.length && b.is(a)) ? b : null; this.setActive(a); return this.active }; b.prototype._status = function () { this._disableStatus(); if (!this.disabled) return this._activeStatus() }; b.prototype.command = function (a) { }; b.prototype._t = function () { var a, c, d; a = 1 <= arguments.length ? w.call(arguments, 0) : []; d = b.__super__._t.apply(this, a); d || (d = (c = this.editor)._t.apply(c, a)); return d }; return b }(p); q.Button = t; p = function (h) { function b(a) { this.button = a.button; this.editor = a.button.editor; b.__super__.constructor.call(this, a) } n(b, h); b.prototype.offset = { top: 4, left: 0 }; b.prototype.target = null; b.prototype.active = !1; b.prototype._init = function () { this.el = g('\x3cdiv class\x3d"simditor-popover"\x3e\x3c/div\x3e').appendTo(this.editor.el).data("popover", this); this.render(); this.el.on("mouseenter", function (a) { return function (b) { return a.el.addClass("hover") } }(this)); return this.el.on("mouseleave", function (a) { return function (b) { return a.el.removeClass("hover") } }(this)) }; b.prototype.render = function () { }; b.prototype._initLabelWidth = function () { var a; a = this.el.find(".settings-field"); if (0 < a.length) return this._labelWidth = 0, a.each(function (a) { return function (b, c) { var d; d = g(c).find("label"); if (0 < d.length) return a._labelWidth = Math.max(a._labelWidth, d.width()) } }(this)), a.find("label").width(this._labelWidth) }; b.prototype.show = function (a, b) { null == b && (b = "bottom"); if (null != a) return this.el.siblings(".simditor-popover").each(function (a, b) { b = g(b).data("popover"); if (b.active) return b.hide() }), this.active && this.target && this.target.removeClass("selected"), this.target = a.addClass("selected"), this.active || (this.active = !0, this.el.css({ left: -9999 }).show(), this._labelWidth || this._initLabelWidth(), this.editor.util.reflow()), this.refresh(b), this.trigger("popovershow") }; b.prototype.hide = function () { if (this.active) return this.target && this.target.removeClass("selected"), this.target = null, this.active = !1, this.el.hide(), this.trigger("popoverhide") }; b.prototype.refresh = function (a) { var b, d, e, f; null == a && (a = "bottom"); if (this.active) return b = this.editor.el.offset(), e = this.target.offset(), d = this.target.outerHeight(), "bottom" === a ? f = e.top - b.top + d : "top" === a && (f = e.top - b.top - this.el.height()), a = this.editor.wrapper.width() - this.el.outerWidth() - 10, this.el.css({ top: f + this.offset.top, left: Math.min(e.left - b.left, a) + this.offset.left }) }; b.prototype.destroy = function () { this.target = null; this.active = !1; this.editor.off(".linkpopover"); return this.el.remove() }; b.prototype._t = function () { var a, c, d; a = 1 <= arguments.length ? w.call(arguments, 0) : []; d = b.__super__._t.apply(this, a); d || (d = (c = this.button)._t.apply(c, a)); return d }; return b }(p); q.Popover = p; r = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "title"; b.prototype.htmlTag = "h1, h2, h3, h4, h5"; b.prototype.disableTag = "pre, table"; b.prototype._init = function () { this.menu = [{ name: "normal", text: this._t("normalText"), param: "p" }, "|", { name: "h1", text: this._t("title") + " 1", param: "h1" }, { name: "h2", text: this._t("title") + " 2", param: "h2" }, { name: "h3", text: this._t("title") + " 3", param: "h3" }, { name: "h4", text: this._t("title") + " 4", param: "h4" }, { name: "h5", text: this._t("title") + " 5", param: "h5" }]; return b.__super__._init.call(this) }; b.prototype.setActive = function (a, c) { b.__super__.setActive.call(this, a); a && (c || (c = this.node[0].tagName.toLowerCase())); this.el.removeClass("active-p active-h1 active-h2 active-h3 active-h4 active-h5"); if (a) return this.el.addClass("active active-" + c) }; b.prototype.command = function (a) { var b; b = this.editor.selection.rootNodes(); this.editor.selection.save(); b.each(function (b) { return function (c, d) { var f; f = g(d); if (!(f.is("blockquote") || f.is(a) || f.is(b.disableTag) || b.editor.util.isDecoratedNode(f))) return g("\x3c" + a + "/\x3e").append(f.contents()).replaceAll(f) } }(this)); this.editor.selection.restore(); return this.editor.trigger("valuechanged") }; return b }(t); q.Toolbar.addButton(r); r = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "fontScale"; b.prototype.icon = "font"; b.prototype.disableTag = "pre"; b.prototype.htmlTag = "span"; b.prototype.sizeMap = { "x-large": "1.5em", large: "1.25em", small: ".75em", "x-small": ".5em" }; b.prototype._init = function () { this.menu = [{ name: "150%", text: this._t("fontScaleXLarge"), param: "5" }, { name: "125%", text: this._t("fontScaleLarge"), param: "4" }, { name: "100%", text: this._t("fontScaleNormal"), param: "3" }, { name: "75%", text: this._t("fontScaleSmall"), param: "2" }, { name: "50%", text: this._t("fontScaleXSmall"), param: "1" }]; return b.__super__._init.call(this) }; b.prototype._activeStatus = function () { var a, b, d, e; this.editor.selection.range(); e = this.editor.selection.startNodes(); b = this.editor.selection.endNodes(); d = e.filter('span[style*\x3d"font-size"]'); a = b.filter('span[style*\x3d"font-size"]'); a = 0 < e.length && 0 < b.length && d.is(a); this.setActive(a); return this.active }; b.prototype.command = function (a) { if (!this.editor.selection.range().collapsed) return document.execCommand("styleWithCSS", !1, !0), document.execCommand("fontSize", !1, a), document.execCommand("styleWithCSS", !1, !1), this.editor.selection.reset(), this.editor.selection.range(), a = this.editor.selection.containerNode(), a = a[0].nodeType === Node.TEXT_NODE ? a.closest('span[style*\x3d"font-size"]') : a.find('span[style*\x3d"font-size"]'), a.each(function (a) { return function (b, c) { var d, e; d = g(c); e = c.style.fontSize; if (/large|x-large|small|x-small/.test(e)) return d.css("fontSize", a.sizeMap[e]); if ("medium" === e) return d.replaceWith(d.contents()) } }(this)), this.editor.trigger("valuechanged") }; return b }(t); q.Toolbar.addButton(r); r = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "bold"; b.prototype.icon = "bold"; b.prototype.htmlTag = "b, strong"; b.prototype.disableTag = "pre"; b.prototype.shortcut = "cmd+b"; b.prototype._init = function () { this.editor.util.os.mac ? this.title += " ( Cmd + b )" : (this.title += " ( Ctrl + b )", this.shortcut = "ctrl+b"); return b.__super__._init.call(this) }; b.prototype._activeStatus = function () { var a; a = !0 === document.queryCommandState("bold"); this.setActive(a); return this.active }; b.prototype.command = function () { document.execCommand("bold"); this.editor.util.support.oninput || this.editor.trigger("valuechanged"); return g(document).trigger("selectionchange") }; return b }(t); q.Toolbar.addButton(r); r = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "italic"; b.prototype.icon = "italic"; b.prototype.htmlTag = "i"; b.prototype.disableTag = "pre"; b.prototype.shortcut = "cmd+i"; b.prototype._init = function () { this.editor.util.os.mac ? this.title += " ( Cmd + i )" : (this.title += " ( Ctrl + i )", this.shortcut = "ctrl+i"); return b.__super__._init.call(this) }; b.prototype._activeStatus = function () { var a; a = !0 === document.queryCommandState("italic"); this.setActive(a); return this.active }; b.prototype.command = function () { document.execCommand("italic"); this.editor.util.support.oninput || this.editor.trigger("valuechanged"); return g(document).trigger("selectionchange") }; return b }(t); q.Toolbar.addButton(r); r = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "underline"; b.prototype.icon = "underline"; b.prototype.htmlTag = "u"; b.prototype.disableTag = "pre"; b.prototype.shortcut = "cmd+u"; b.prototype.render = function () { this.editor.util.os.mac ? this.title += " ( Cmd + u )" : (this.title += " ( Ctrl + u )", this.shortcut = "ctrl+u"); return b.__super__.render.call(this) }; b.prototype._activeStatus = function () { var a; a = !0 === document.queryCommandState("underline"); this.setActive(a); return this.active }; b.prototype.command = function () { document.execCommand("underline"); this.editor.util.support.oninput || this.editor.trigger("valuechanged"); return g(document).trigger("selectionchange") }; return b }(t); q.Toolbar.addButton(r); r = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "color"; b.prototype.icon = "tint"; b.prototype.disableTag = "pre"; b.prototype.menu = !0; b.prototype.render = function () { var a; a = 1 <= arguments.length ? w.call(arguments, 0) : []; return b.__super__.render.apply(this, a) }; b.prototype.renderMenu = function () { g('\x3cul class\x3d"color-list"\x3e\n  \x3cli\x3e\x3ca href\x3d"javascript:;" class\x3d"font-color font-color-1"\x3e\x3c/a\x3e\x3c/li\x3e\n  \x3cli\x3e\x3ca href\x3d"javascript:;" class\x3d"font-color font-color-2"\x3e\x3c/a\x3e\x3c/li\x3e\n  \x3cli\x3e\x3ca href\x3d"javascript:;" class\x3d"font-color font-color-3"\x3e\x3c/a\x3e\x3c/li\x3e\n  \x3cli\x3e\x3ca href\x3d"javascript:;" class\x3d"font-color font-color-4"\x3e\x3c/a\x3e\x3c/li\x3e\n  \x3cli\x3e\x3ca href\x3d"javascript:;" class\x3d"font-color font-color-5"\x3e\x3c/a\x3e\x3c/li\x3e\n  \x3cli\x3e\x3ca href\x3d"javascript:;" class\x3d"font-color font-color-6"\x3e\x3c/a\x3e\x3c/li\x3e\n  \x3cli\x3e\x3ca href\x3d"javascript:;" class\x3d"font-color font-color-7"\x3e\x3c/a\x3e\x3c/li\x3e\n  \x3cli\x3e\x3ca href\x3d"javascript:;" class\x3d"font-color font-color-default"\x3e\x3c/a\x3e\x3c/li\x3e\n\x3c/ul\x3e').appendTo(this.menuWrapper); this.menuWrapper.on("mousedown", ".color-list", function (a) { return !1 }); return this.menuWrapper.on("click", ".font-color", function (a) { return function (b) { var c, e; a.wrapper.removeClass("menu-on"); b = g(b.currentTarget); if (b.hasClass("font-color-default")) { c = a.editor.body.find("p, li"); if (!(0 < c.length)) return; c = window.getComputedStyle(c[0], null).getPropertyValue("color") } else c = window.getComputedStyle(b[0], null).getPropertyValue("background-color"); if (c = a._convertRgbToHex(c)) if (e = a.editor.selection.range(), !b.hasClass("font-color-default") && e.collapsed && (b = document.createTextNode(a._t("coloredText")), e.insertNode(b), e.selectNodeContents(b), a.editor.selection.range(e)), document.execCommand("styleWithCSS", !1, !0), document.execCommand("foreColor", !1, c), document.execCommand("styleWithCSS", !1, !1), !a.editor.util.support.oninput) return a.editor.trigger("valuechanged") } }(this)) }; b.prototype._convertRgbToHex = function (a) { return (a = /rgb\((\d+),\s?(\d+),\s?(\d+)\)/g.exec(a)) ? function (a, b, e) { var c; c = function (a) { a = a.toString(16); return 1 === a.length ? "0" + a : a }; return "#" + c(a) + c(b) + c(e) }(1 * a[1], 1 * a[2], 1 * a[3]) : "" }; return b }(t); q.Toolbar.addButton(r); x = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.type = ""; b.prototype.disableTag = "pre, table"; b.prototype.command = function (a) { var b, d; a = this.editor.selection.blockNodes(); d = "ul" === this.type ? "ol" : "ul"; this.editor.selection.save(); b = null; a.each(function (a) { return function (c, e) { var f; f = g(e); if (!(f.is("blockquote, li") || f.is(a.disableTag) || a.editor.util.isDecoratedNode(f)) && g.contains(document, e)) { if (f.is(a.type)) return f.children("li").each(function (b, c) { g(c).children("ul, ol").insertAfter(f); return g("\x3cp/\x3e").append(g(c).html() || a.editor.util.phBr).insertBefore(f) }), f.remove(); if (f.is(d)) return g("\x3c" + a.type + "/\x3e").append(f.contents()).replaceAll(f); if (b && f.prev().is(b)) return g("\x3cli/\x3e").append(f.html() || a.editor.util.phBr).appendTo(b), f.remove(); b = g("\x3c" + a.type + "\x3e\x3cli\x3e\x3c/li\x3e\x3c/" + a.type + "\x3e"); b.find("li").append(f.html() || a.editor.util.phBr); return b.replaceAll(f) } } }(this)); this.editor.selection.restore(); return this.editor.trigger("valuechanged") }; return b }(t); r = function (g) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, g); b.prototype.type = "ol"; b.prototype.name = "ol"; b.prototype.icon = "list-ol"; b.prototype.htmlTag = "ol"; b.prototype.shortcut = "cmd+/"; b.prototype._init = function () { this.editor.util.os.mac ? this.title += " ( Cmd + / )" : (this.title += " ( ctrl + / )", this.shortcut = "ctrl+/"); return b.__super__._init.call(this) }; return b }(x); x = function (g) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, g); b.prototype.type = "ul"; b.prototype.name = "ul"; b.prototype.icon = "list-ul"; b.prototype.htmlTag = "ul"; b.prototype.shortcut = "cmd+."; b.prototype._init = function () { this.editor.util.os.mac ? this.title += " ( Cmd + . )" : (this.title += " ( Ctrl + . )", this.shortcut = "ctrl+."); return b.__super__._init.call(this) }; return b }(x); q.Toolbar.addButton(r); q.Toolbar.addButton(x); r = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "blockquote"; b.prototype.icon = "quote-left"; b.prototype.htmlTag = "blockquote"; b.prototype.disableTag = "pre, table"; b.prototype.command = function () { var a, b, d; a = this.editor.selection.rootNodes(); a = a.filter(function (a, b) { return !g(b).parent().is("blockquote") }); this.editor.selection.save(); d = []; b = function (a) { return function () { if (0 < d.length) return g("\x3c" + a.htmlTag + "/\x3e").insertBefore(d[0]).append(d), d.length = 0 } }(this); a.each(function (a) { return function (c, e) { var f; f = g(e); if (f.parent().is(a.editor.body)) return f.is(a.htmlTag) ? (b(), f.children().unwrap()) : f.is(a.disableTag) || a.editor.util.isDecoratedNode(f) ? b() : d.push(e) } }(this)); b(); this.editor.selection.restore(); return this.editor.trigger("valuechanged") }; return b }(t); q.Toolbar.addButton(r); r = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "code"; b.prototype.icon = "code"; b.prototype.htmlTag = "pre"; b.prototype.disableTag = "ul, ol, table"; b.prototype._init = function () { b.__super__._init.call(this); this.editor.on("decorate", function (a) { return function (b, d) { return d.find("pre").each(function (b, c) { return a.decorate(g(c)) }) } }(this)); return this.editor.on("undecorate", function (a) { return function (b, d) { return d.find("pre").each(function (b, c) { return a.undecorate(g(c)) }) } }(this)) }; b.prototype.render = function () { var a; a = 1 <= arguments.length ? w.call(arguments, 0) : []; b.__super__.render.apply(this, a); return this.popover = new C({ button: this }) }; b.prototype._checkMode = function () { var a; a = this.editor.selection.range(); if (0 < g(a.cloneContents()).find(this.editor.util.blockNodes.join(",")) || a.collapsed && 0 === this.editor.selection.startNodes().filter("code").length) return this.inlineMode = !1, this.htmlTag = "pre"; this.inlineMode = !0; return this.htmlTag = "code" }; b.prototype._status = function () { this._checkMode(); b.__super__._status.call(this); if (!this.inlineMode) return this.active ? this.popover.show(this.node) : this.popover.hide() }; b.prototype.decorate = function (a) { var b, d, e, f; b = a.find("\x3e code"); if (0 < b.length && (d = null != (e = b.attr("class")) ? null != (f = e.match(/lang-(\S+)/)) ? f[1] : void 0 : void 0, b.contents().unwrap(), d)) return a.attr("data-lang", d) }; b.prototype.undecorate = function (a) { var b, d; d = a.attr("data-lang"); b = g("\x3ccode/\x3e"); d && -1 !== d && b.addClass("lang-" + d); return a.wrapInner(b).removeAttr("data-lang") }; b.prototype.command = function () { return this.inlineMode ? this._inlineCommand() : this._blockCommand() }; b.prototype._blockCommand = function () { var a, b, d, e; a = this.editor.selection.rootNodes(); d = []; e = []; b = function (a) { return function () { var b; if (0 < d.length) return b = g("\x3c" + a.htmlTag + "/\x3e").insertBefore(d[0]).text(a.editor.formatter.clearHtml(d)), e.push(b[0]), d.length = 0 } }(this); a.each(function (a) { return function (c, f) { var l; l = g(f); return l.is(a.htmlTag) ? (b(), l = g("\x3cp/\x3e").append(l.html().replace("\n", "\x3cbr/\x3e")).replaceAll(l), e.push(l[0])) : l.is(a.disableTag) || a.editor.util.isDecoratedNode(l) || l.is("blockquote") ? b() : d.push(f) } }(this)); b(); this.editor.selection.setRangeAtEndOf(g(e).last()); return this.editor.trigger("valuechanged") }; b.prototype._inlineCommand = function () { var a, b; b = this.editor.selection.range(); this.active ? (b.selectNodeContents(this.node[0]), this.editor.selection.save(b), this.node.contents().unwrap(), this.editor.selection.restore()) : (a = g(b.extractContents()), a = g("\x3c" + this.htmlTag + "/\x3e").append(a.contents()), b.insertNode(a[0]), b.selectNodeContents(a[0]), this.editor.selection.range(b)); return this.editor.trigger("valuechanged") }; return b }(t); C = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.render = function () { var a, b, d, e; this._tpl = '\x3cdiv class\x3d"code-settings"\x3e\n  \x3cdiv class\x3d"settings-field"\x3e\n    \x3cselect class\x3d"select-lang"\x3e\n      \x3coption value\x3d"-1"\x3e' + this._t("selectLanguage") + "\x3c/option\x3e\n    \x3c/select\x3e\n  \x3c/div\x3e\n\x3c/div\x3e"; this.langs = this.editor.opts.codeLanguages || [{ name: "Bash", value: "bash" }, { name: "C++", value: "c++" }, { name: "C#", value: "cs" }, { name: "CSS", value: "css" }, { name: "Erlang", value: "erlang" }, { name: "Less", value: "less" }, { name: "Sass", value: "sass" }, { name: "Diff", value: "diff" }, { name: "CoffeeScript", value: "coffeescript" }, { name: "HTML,XML", value: "html" }, { name: "JSON", value: "json" }, { name: "Java", value: "java" }, { name: "JavaScript", value: "js" }, { name: "Markdown", value: "markdown" }, { name: "Objective C", value: "oc" }, { name: "PHP", value: "php" }, { name: "Perl", value: "parl" }, { name: "Python", value: "python" }, { name: "Ruby", value: "ruby" }, { name: "SQL", value: "sql" }]; this.el.addClass("code-popover").append(this._tpl); this.selectEl = this.el.find(".select-lang"); e = this.langs; a = 0; for (d = e.length; a < d; a++) b = e[a], g("\x3coption/\x3e", { text: b.name, value: b.value }).appendTo(this.selectEl); this.selectEl.on("change", function (a) { return function (b) { a.lang = a.selectEl.val(); b = a.target.hasClass("selected"); a.target.removeClass().removeAttr("data-lang"); -1 !== a.lang && a.target.attr("data-lang", a.lang); b && a.target.addClass("selected"); return a.editor.trigger("valuechanged") } }(this)); return this.editor.on("valuechanged", function (a) { return function (b) { if (a.active) return a.refresh() } }(this)) }; b.prototype.show = function () { var a; a = 1 <= arguments.length ? w.call(arguments, 0) : []; b.__super__.show.apply(this, a); this.lang = this.target.attr("data-lang"); return null != this.lang ? this.selectEl.val(this.lang) : this.selectEl.val(-1) }; return b }(p); q.Toolbar.addButton(r); r = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "link"; b.prototype.icon = "link"; b.prototype.htmlTag = "a"; b.prototype.disableTag = "pre"; b.prototype.render = function () { var a; a = 1 <= arguments.length ? w.call(arguments, 0) : []; b.__super__.render.apply(this, a); return this.popover = new I({ button: this }) }; b.prototype._status = function () { b.__super__._status.call(this); return this.active && !this.editor.selection.rangeAtEndOf(this.node) ? this.popover.show(this.node) : this.popover.hide() }; b.prototype.command = function () { var a, b, d, e; e = this.editor.selection.range(); this.active ? (a = document.createTextNode(this.node.text()), this.node.replaceWith(a), e.selectNode(a)) : (a = g(e.extractContents()), d = this.editor.formatter.clearHtml(a.contents(), !1), a = g("\x3ca/\x3e", { href: "http://www.example.com", target: "_blank", text: d || this._t("linkText") }), 0 < this.editor.selection.blockNodes().length ? e.insertNode(a[0]) : (b = g("\x3cp/\x3e").append(a), e.insertNode(b[0])), e.selectNodeContents(a[0]), this.popover.one("popovershow", function (a) { return function () { if (d) return a.popover.urlEl.focus(), a.popover.urlEl[0].select(); a.popover.textEl.focus(); return a.popover.textEl[0].select() } }(this))); this.editor.selection.range(e); return this.editor.trigger("valuechanged") }; return b }(t); I = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.render = function () { var a; a = '\x3cdiv class\x3d"link-settings"\x3e\n  \x3cdiv class\x3d"settings-field"\x3e\n    \x3clabel\x3e' + this._t("linkText") + '\x3c/label\x3e\n    \x3cinput class\x3d"link-text" type\x3d"text"/\x3e\n    \x3ca class\x3d"btn-unlink" href\x3d"javascript:;" title\x3d"' + this._t("removeLink") + '"\n      tabindex\x3d"-1"\x3e\n      \x3cspan class\x3d"simditor-icon simditor-icon-unlink"\x3e\x3c/span\x3e\n    \x3c/a\x3e\n  \x3c/div\x3e\n  \x3cdiv class\x3d"settings-field"\x3e\n    \x3clabel\x3e' + this._t("linkUrl") + '\x3c/label\x3e\n    \x3cinput class\x3d"link-url" type\x3d"text"/\x3e\n  \x3c/div\x3e\n  \x3cdiv class\x3d"settings-field"\x3e\n    \x3clabel\x3e' + this._t("linkTarget") + '\x3c/label\x3e\n    \x3cselect class\x3d"link-target"\x3e\n      \x3coption value\x3d"_blank"\x3e' + this._t("openLinkInNewWindow") + ' (_blank)\x3c/option\x3e\n      \x3coption value\x3d"_self"\x3e' + this._t("openLinkInCurrentWindow") + " (_self)\x3c/option\x3e\n    \x3c/select\x3e\n  \x3c/div\x3e\n\x3c/div\x3e"; this.el.addClass("link-popover").append(a); this.textEl = this.el.find(".link-text"); this.urlEl = this.el.find(".link-url"); this.unlinkEl = this.el.find(".btn-unlink"); this.selectTarget = this.el.find(".link-target"); this.textEl.on("keyup", function (a) { return function (b) { if (13 !== b.which) return a.target.text(a.textEl.val()), a.editor.inputManager.throttledValueChanged() } }(this)); this.urlEl.on("keyup", function (a) { return function (b) { if (13 !== b.which) return b = a.urlEl.val(), !/https?:\/\/|^\//ig.test(b) && b && (b = "http://" + b), a.target.attr("href", b), a.editor.inputManager.throttledValueChanged() } }(this)); g([this.urlEl[0], this.textEl[0]]).on("keydown", function (a) { return function (b) { if (13 === b.which || 27 === b.which || !b.shiftKey && 9 === b.which && g(b.target).hasClass("link-url")) return b.preventDefault(), b = document.createRange(), a.editor.selection.setRangeAfter(a.target, b), a.hide(), a.editor.inputManager.throttledValueChanged() } }(this)); this.unlinkEl.on("click", function (a) { return function (b) { var c; c = document.createTextNode(a.target.text()); a.target.replaceWith(c); a.hide(); b = document.createRange(); a.editor.selection.setRangeAfter(c, b); return a.editor.inputManager.throttledValueChanged() } }(this)); return this.selectTarget.on("change", function (a) { return function (b) { a.target.attr("target", a.selectTarget.val()); return a.editor.inputManager.throttledValueChanged() } }(this)) }; b.prototype.show = function () { var a; a = 1 <= arguments.length ? w.call(arguments, 0) : []; b.__super__.show.apply(this, a); this.textEl.val(this.target.text()); return this.urlEl.val(this.target.attr("href")) }; return b }(p); q.Toolbar.addButton(r); r = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "image"; b.prototype.icon = "picture-o"; b.prototype.htmlTag = "img"; b.prototype.disableTag = "pre, table"; b.prototype.defaultImage = ""; b.prototype.needFocus = !1; b.prototype._init = function () { var a, c, d, e; if (this.editor.opts.imageButton) if (Array.isArray(this.editor.opts.imageButton)) for (this.menu = [], e = this.editor.opts.imageButton, c = 0, d = e.length; c < d; c++) a = e[c], this.menu.push({ name: a + "-image", text: this._t(a + "Image") }); else this.menu = !1; else this.menu = null != this.editor.uploader ? [{ name: "upload-image", text: this._t("uploadImage") }, { name: "external-image", text: this._t("externalImage") }] : !1; this.defaultImage = this.editor.opts.defaultImage; this.editor.body.on("click", "img:not([data-non-image])", function (a) { return function (b) { var c; b = g(b.currentTarget); c = document.createRange(); c.selectNode(b[0]); a.editor.selection.range(c); a.editor.util.support.onselectionchange || a.editor.trigger("selectionchanged"); return !1 } }(this)); this.editor.body.on("mouseup", "img:not([data-non-image])", function (a) { return !1 }); this.editor.on("selectionchanged.image", function (a) { return function () { var b, c; c = a.editor.selection.range(); if (null != c) return b = g(c.cloneContents()).contents(), 1 === b.length && b.is("img:not([data-non-image])") ? (b = g(c.startContainer).contents().eq(c.startOffset), a.popover.show(b)) : a.popover.hide() } }(this)); this.editor.on("valuechanged.image", function (a) { return function () { var b; b = a.editor.wrapper.find(".simditor-image-loading"); if (0 < b.length) return b.each(function (b, c) { var d, f; f = g(c); d = f.data("img"); if (!(d && 0 < d.parent().length) && (f.remove(), d && (d = d.data("file"))) && (a.editor.uploader.cancel(d), 1 > a.editor.body.find("img.uploading").length)) return a.editor.uploader.trigger("uploadready", [d]) }) } }(this)); return b.__super__._init.call(this) }; b.prototype.render = function () { var a; a = 1 <= arguments.length ? w.call(arguments, 0) : []; b.__super__.render.apply(this, a); this.popover = new E({ button: this }); if ("upload" === this.editor.opts.imageButton) return this._initUploader(this.el) }; b.prototype.renderMenu = function () { b.__super__.renderMenu.call(this); return this._initUploader() }; b.prototype._initUploader = function (a) { var b, d, e; null == a && (a = this.menuEl.find(".menu-item-upload-image")); if (null == this.editor.uploader) this.el.find(".btn-upload").remove(); else return b = null, d = function (c) { return function () { b && b.remove(); return b = g("\x3cinput/\x3e", { type: "file", title: c._t("uploadImage"), multiple: !0, accept: "image/*" }).appendTo(a) } }(this), d(), a.on("click mousedown", "input[type\x3dfile]", function (a) { return a.stopPropagation() }), a.on("change", "input[type\x3dfile]", function (a) { return function (c) { a.editor.inputManager.focused ? (a.editor.uploader.upload(b, { inline: !0 }), d()) : (a.editor.one("focus", function (c) { a.editor.uploader.upload(b, { inline: !0 }); return d() }), a.editor.focus()); return a.wrapper.removeClass("menu-on") } }(this)), this.editor.uploader.on("beforeupload", function (a) { return function (b, c) { var d; if (c.inline) return c.img ? d = g(c.img) : (d = a.createImage(c.name), c.img = d), d.addClass("uploading"), d.data("file", c), a.editor.uploader.readImageFile(c.obj, function (b) { if (d.hasClass("uploading")) return a.loadImage(d, b ? b.src : a.defaultImage, function () { if (a.popover.active) return a.popover.refresh(), a.popover.srcEl.val(a._t("uploading")).prop("disabled", !0) }) }) } }(this)), e = g.proxy(this.editor.util.throttle(function (a, b, c, d) { if (b.inline && (a = b.img.data("mask"))) { b = a.data("img"); if (b.hasClass("uploading") && 0 < b.parent().length) return c = (c / d * 100).toFixed(0), 99 < c && (c = 99), a.find(".progress").height(100 - c + "%"); a.remove() } }, 500), this), this.editor.uploader.on("uploadprogress", e), this.editor.uploader.on("uploadsuccess", function (a) { return function (b, c, d) { var e; if (c.inline && (e = c.img, e.hasClass("uploading") && 0 < e.parent().length)) { if ("object" !== typeof d) try { d = g.parseJSON(d) } catch (O) { d = { success: !1 } } !1 === d.success ? (b = d.msg || a._t("uploadFailed"), alert(b), b = a.defaultImage) : b = d.file_path; a.loadImage(e, b, function () { var b; e.removeData("file"); e.removeClass("uploading").removeClass("loading"); (b = e.data("mask")) && b.remove(); e.removeData("mask"); a.editor.trigger("valuechanged"); if (1 > a.editor.body.find("img.uploading").length) return a.editor.uploader.trigger("uploadready", [c, d]) }); if (a.popover.active) return a.popover.srcEl.prop("disabled", !1), a.popover.srcEl.val(d.file_path) } } }(this)), this.editor.uploader.on("uploaderror", function (a) { return function (b, c, d) { var e, f, l; if (c.inline && "abort" !== d.statusText) { if (d.responseText) { try { l = g.parseJSON(d.responseText), f = l.msg } catch (P) { f = a._t("uploadError") } alert(f) } e = c.img; if (e.hasClass("uploading") && 0 < e.parent().length && (a.loadImage(e, a.defaultImage, function () { var a; e.removeData("file"); e.removeClass("uploading").removeClass("loading"); (a = e.data("mask")) && a.remove(); return e.removeData("mask") }), a.popover.active && (a.popover.srcEl.prop("disabled", !1), a.popover.srcEl.val(a.defaultImage)), a.editor.trigger("valuechanged"), 1 > a.editor.body.find("img.uploading").length)) return a.editor.uploader.trigger("uploadready", [c, l]) } } }(this)) }; b.prototype._status = function () { return this._disableStatus() }; b.prototype.loadImage = function (a, b, d) { var c, f, l; l = function (b) { return function () { var d, e; d = a.offset(); e = b.editor.wrapper.offset(); return c.css({ top: d.top - e.top, left: d.left - e.left, width: a.width(), height: a.height() }).show() } }(this); a.addClass("loading"); c = a.data("mask"); c || (c = g('\x3cdiv class\x3d"simditor-image-loading"\x3e\n  \x3cdiv class\x3d"progress"\x3e\x3c/div\x3e\n\x3c/div\x3e').hide().appendTo(this.editor.wrapper), l(), a.data("mask", c), c.data("img", a)); f = new Image; f.onload = function (e) { return function () { var h, k; if (a.hasClass("loading") || a.hasClass("uploading")) if (k = f.width, h = f.height, a.attr({ src: b, width: k, height: h, "data-image-size": k + "," + h }).removeClass("loading"), a.hasClass("uploading") ? (e.editor.util.reflow(e.editor.body), l()) : (c.remove(), a.removeData("mask")), g.isFunction(d)) return d(f) } }(this); f.onerror = function () { g.isFunction(d) && d(!1); c.remove(); return a.removeData("mask").removeClass("loading") }; return f.src = b }; b.prototype.createImage = function (a) { var b; null == a && (a = "Image"); this.editor.inputManager.focused || this.editor.focus(); b = this.editor.selection.range(); b.deleteContents(); this.editor.selection.range(b); a = g("\x3cimg/\x3e").attr("alt", a); b.insertNode(a[0]); this.editor.selection.setRangeAfter(a, b); this.editor.trigger("valuechanged"); return a }; b.prototype.command = function (a) { var b; b = this.createImage(); return this.loadImage(b, a || this.defaultImage, function (a) { return function () { a.editor.trigger("valuechanged"); a.editor.util.reflow(b); b.click(); return a.popover.one("popovershow", function () { a.popover.srcEl.focus(); return a.popover.srcEl[0].select() }) } }(this)) }; return b }(t); E = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.offset = { top: 6, left: -4 }; b.prototype.render = function () { var a; a = '\x3cdiv class\x3d"link-settings"\x3e\n  \x3cdiv class\x3d"settings-field"\x3e\n    \x3clabel\x3e' + this._t("imageUrl") + '\x3c/label\x3e\n    \x3cinput class\x3d"image-src" type\x3d"text" tabindex\x3d"1" /\x3e\n    \x3ca class\x3d"btn-upload" href\x3d"javascript:;"\n      title\x3d"' + this._t("uploadImage") + '" tabindex\x3d"-1"\x3e\n      \x3cspan class\x3d"simditor-icon simditor-icon-upload"\x3e\x3c/span\x3e\n    \x3c/a\x3e\n  \x3c/div\x3e\n  \x3cdiv class\x3d\'settings-field\'\x3e\n    \x3clabel\x3e' + this._t("imageAlt") + '\x3c/label\x3e\n    \x3cinput class\x3d"image-alt" id\x3d"image-alt" type\x3d"text" tabindex\x3d"1" /\x3e\n  \x3c/div\x3e\n  \x3cdiv class\x3d"settings-field"\x3e\n    \x3clabel\x3e' + this._t("imageSize") + '\x3c/label\x3e\n    \x3cinput class\x3d"image-size" id\x3d"image-width" type\x3d"text" tabindex\x3d"2" /\x3e\n    \x3cspan class\x3d"times"\x3e\u00d7\x3c/span\x3e\n    \x3cinput class\x3d"image-size" id\x3d"image-height" type\x3d"text" tabindex\x3d"3" /\x3e\n    \x3ca class\x3d"btn-restore" href\x3d"javascript:;"\n      title\x3d"' + this._t("restoreImageSize") + '" tabindex\x3d"-1"\x3e\n      \x3cspan class\x3d"simditor-icon simditor-icon-undo"\x3e\x3c/span\x3e\n    \x3c/a\x3e\n  \x3c/div\x3e\n\x3c/div\x3e'; this.el.addClass("image-popover").append(a); this.srcEl = this.el.find(".image-src"); this.widthEl = this.el.find("#image-width"); this.heightEl = this.el.find("#image-height"); this.altEl = this.el.find("#image-alt"); this.srcEl.on("keydown", function (a) { return function (b) { if (13 === b.which && !a.target.hasClass("uploading")) return b.preventDefault(), b = document.createRange(), a.button.editor.selection.setRangeAfter(a.target, b), a.hide() } }(this)); this.srcEl.on("blur", function (a) { return function (b) { return a._loadImage(a.srcEl.val()) } }(this)); this.el.find(".image-size").on("blur", function (a) { return function (b) { a._resizeImg(g(b.currentTarget)); return a.el.data("popover").refresh() } }(this)); this.el.find(".image-size").on("keyup", function (a) { return function (b) { var c; c = g(b.currentTarget); if (13 !== b.which && 27 !== b.which && 9 !== b.which) return a._resizeImg(c, !0) } }(this)); this.el.find(".image-size").on("keydown", function (a) { return function (b) { var c; c = g(b.currentTarget); if (13 === b.which || 27 === b.which) return b.preventDefault(), 13 === b.which ? a._resizeImg(c) : a._restoreImg(), b = a.target, a.hide(), c = document.createRange(), a.button.editor.selection.setRangeAfter(b, c); if (9 === b.which) return a.el.data("popover").refresh() } }(this)); this.altEl.on("keydown", function (a) { return function (b) { if (13 === b.which) return b.preventDefault(), b = document.createRange(), a.button.editor.selection.setRangeAfter(a.target, b), a.hide() } }(this)); this.altEl.on("keyup", function (a) { return function (b) { if (13 !== b.which && 27 !== b.which && 9 !== b.which) return a.alt = a.altEl.val(), a.target.attr("alt", a.alt) } }(this)); this.el.find(".btn-restore").on("click", function (a) { return function (b) { a._restoreImg(); return a.el.data("popover").refresh() } }(this)); this.editor.on("valuechanged", function (a) { return function (b) { if (a.active) return a.refresh() } }(this)); return this._initUploader() }; b.prototype._initUploader = function () { var a, b; a = this.el.find(".btn-upload"); if (null == this.editor.uploader) a.remove(); else return b = function (b) { return function () { b.input && b.input.remove(); return b.input = g("\x3cinput/\x3e", { type: "file", title: b._t("uploadImage"), multiple: !0, accept: "image/*" }).appendTo(a) } }(this), b(), this.el.on("click mousedown", "input[type\x3dfile]", function (a) { return a.stopPropagation() }), this.el.on("change", "input[type\x3dfile]", function (a) { return function (c) { a.editor.uploader.upload(a.input, { inline: !0, img: a.target }); return b() } }(this)) }; b.prototype._resizeImg = function (a, b) { var c, e, f; null == b && (b = !1); e = 1 * a.val(); if (this.target && (g.isNumeric(e) || 0 > e) && (a.is(this.widthEl) ? (f = e, c = this.height * e / this.width, this.heightEl.val(c)) : (c = e, f = this.width * e / this.height, this.widthEl.val(f)), !b)) return this.target.attr({ width: f, height: c }), this.editor.trigger("valuechanged") }; b.prototype._restoreImg = function () { var a, b; b = (null != (a = this.target.data("image-size")) ? a.split(",") : void 0) || [this.width, this.height]; this.target.attr({ width: 1 * b[0], height: 1 * b[1] }); this.widthEl.val(b[0]); this.heightEl.val(b[1]); return this.editor.trigger("valuechanged") }; b.prototype._loadImage = function (a, b) { if (/^data:image/.test(a) && !this.editor.uploader) b && b(!1); else if (this.target.attr("src") !== a) return this.button.loadImage(this.target, a, function (c) { return function (d) { var e; if (d && (c.active && (c.width = d.width, c.height = d.height, c.widthEl.val(c.width), c.heightEl.val(c.height)), /^data:image/.test(a) ? (e = c.editor.util.dataURLtoBlob(a), e.name = "Base64 Image.png", c.editor.uploader.upload(e, { inline: !0, img: c.target })) : c.editor.trigger("valuechanged"), b)) return b(d) } }(this)) }; b.prototype.show = function () { var a; a = 1 <= arguments.length ? w.call(arguments, 0) : []; b.__super__.show.apply(this, a); a = this.target; this.width = a.width(); this.height = a.height(); this.alt = a.attr("alt"); if (a.hasClass("uploading")) return this.srcEl.val(this._t("uploading")).prop("disabled", !0); this.srcEl.val(a.attr("src")).prop("disabled", !1); this.widthEl.val(this.width); this.heightEl.val(this.height); return this.altEl.val(this.alt) }; return b }(p); q.Toolbar.addButton(r); p = function (g) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, g); b.prototype.name = "indent"; b.prototype.icon = "indent"; b.prototype._init = function () { this.title = this._t(this.name) + " (Tab)"; return b.__super__._init.call(this) }; b.prototype._status = function () { }; b.prototype.command = function () { return this.editor.indentation.indent() }; return b }(t); q.Toolbar.addButton(p); p = function (g) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, g); b.prototype.name = "outdent"; b.prototype.icon = "outdent"; b.prototype._init = function () { this.title = this._t(this.name) + " (Shift + Tab)"; return b.__super__._init.call(this) }; b.prototype._status = function () { }; b.prototype.command = function () { return this.editor.indentation.indent(!0) }; return b }(t); q.Toolbar.addButton(p); p = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "hr"; b.prototype.icon = "minus"; b.prototype.htmlTag = "hr"; b.prototype._status = function () { }; b.prototype.command = function () { var a, b; a = this.editor.selection.rootNodes().first(); 0 < a.next().length ? this.editor.selection.save() : b = g("\x3cp/\x3e").append(this.editor.util.phBr); a = g("\x3chr/\x3e").insertAfter(a); b ? (b.insertAfter(a), this.editor.selection.setRangeAtStartOf(b)) : this.editor.selection.restore(); return this.editor.trigger("valuechanged") }; return b }(t); q.Toolbar.addButton(p); p = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "table"; b.prototype.icon = "table"; b.prototype.htmlTag = "table"; b.prototype.disableTag = "pre, li, blockquote"; b.prototype.menu = !0; b.prototype._init = function () { b.__super__._init.call(this); g.merge(this.editor.formatter._allowedTags, "thead th tbody tr td colgroup col".split(" ")); g.extend(this.editor.formatter._allowedAttributes, { td: ["rowspan", "colspan"], col: ["width"] }); g.extend(this.editor.formatter._allowedStyles, { td: ["text-align"], th: ["text-align"] }); this._initShortcuts(); this.editor.on("decorate", function (a) { return function (b, d) { return d.find("table").each(function (b, c) { return a.decorate(g(c)) }) } }(this)); this.editor.on("undecorate", function (a) { return function (b, d) { return d.find("table").each(function (b, c) { return a.undecorate(g(c)) }) } }(this)); this.editor.on("selectionchanged.table", function (a) { return function (b) { var c; a.editor.body.find(".simditor-table td, .simditor-table th").removeClass("active"); if (c = a.editor.selection.range()) return b = a.editor.selection.containerNode(), c.collapsed && b.is(".simditor-table") && (b = a.editor.selection.rangeAtStartOf(b) ? b.find("th:first") : b.find("td:last"), a.editor.selection.setRangeAtEndOf(b)), b.closest("td, th", a.editor.body).addClass("active") } }(this)); this.editor.on("blur.table", function (a) { return function (b) { return a.editor.body.find(".simditor-table td, .simditor-table th").removeClass("active") } }(this)); this.editor.keystroke.add("up", "td", function (a) { return function (b, d) { a._tdNav(d, "up"); return !0 } }(this)); this.editor.keystroke.add("up", "th", function (a) { return function (b, d) { a._tdNav(d, "up"); return !0 } }(this)); this.editor.keystroke.add("down", "td", function (a) { return function (b, d) { a._tdNav(d, "down"); return !0 } }(this)); return this.editor.keystroke.add("down", "th", function (a) { return function (b, d) { a._tdNav(d, "down"); return !0 } }(this)) }; b.prototype._tdNav = function (a, b) { var c, e; null == b && (b = "up"); c = "up" === b ? "prev" : "next"; e = a.parent("tr"); c = this["_" + c + "Row"](e); if (!(0 < c.length)) return !0; e = e.find("td, th").index(a); return this.editor.selection.setRangeAtEndOf(c.find("td, th").eq(e)) }; b.prototype._nextRow = function (a) { var b; b = a.next("tr"); 1 > b.length && 0 < a.parent("thead").length && (b = a.parent("thead").next("tbody").find("tr:first")); return b }; b.prototype._prevRow = function (a) { var b; b = a.prev("tr"); 1 > b.length && 0 < a.parent("tbody").length && (b = a.parent("tbody").prev("thead").find("tr")); return b }; b.prototype.initResize = function (a) { var b, d, e; e = a.parent(".simditor-table"); b = a.find("colgroup"); 1 > b.length && (b = g("\x3ccolgroup/\x3e").prependTo(a), a.find("thead tr th").each(function (a, c) { return g("\x3ccol/\x3e").appendTo(b) }), this.refreshTableWidth(a)); d = g("\x3cdiv /\x3e", { "class": "simditor-resize-handle", contenteditable: "false" }).appendTo(e); e.on("mousemove", "td, th", function (a) { var c, f, h; if (!e.hasClass("resizing")) if (c = g(a.currentTarget), 5 > a.pageX - g(a.currentTarget).offset().left && 0 < c.prev().length && (c = c.prev()), 1 > c.next("td, th").length) d.hide(); else if (null != (f = d.data("td")) && f.is(c)) d.show(); else if (a = c.parent().find("td, th").index(c), a = b.find("col").eq(a), null != (h = d.data("col")) && h.is(a)) d.show(); else return d.css("left", c.position().left + c.outerWidth() - 5).data("td", c).data("col", a).show() }); e.on("mouseleave", function (a) { return d.hide() }); return e.on("mousedown", ".simditor-resize-handle", function (a) { var b, c, d, f, h, n, p, q, r, t; b = g(a.currentTarget); d = b.data("td"); c = b.data("col"); h = d.next("td, th"); f = c.next("col"); r = a.pageX; p = 1 * d.outerWidth(); q = 1 * h.outerWidth(); n = parseFloat(b.css("left")); t = d.closest("table").width(); g(document).on("mousemove.simditor-resize-table", function (a) { var d, e; a = a.pageX - r; d = p + a; e = q - a; 50 > d ? (d = 50, a = 50 - p, e = q - a) : 50 > e && (e = 50, a = q - 50, d = p + a); c.attr("width", d / t * 100 + "%"); f.attr("width", e / t * 100 + "%"); return b.css("left", n + a) }); g(document).one("mouseup.simditor-resize-table", function (a) { g(document).off(".simditor-resize-table"); return e.removeClass("resizing") }); e.addClass("resizing"); return !1 }) }; b.prototype._initShortcuts = function () { this.editor.hotkeys.add("ctrl+alt+up", function (a) { return function (b) { a.editMenu.find(".menu-item[data-param\x3dinsertRowAbove]").click(); return !1 } }(this)); this.editor.hotkeys.add("ctrl+alt+down", function (a) { return function (b) { a.editMenu.find(".menu-item[data-param\x3dinsertRowBelow]").click(); return !1 } }(this)); this.editor.hotkeys.add("ctrl+alt+left", function (a) { return function (b) { a.editMenu.find(".menu-item[data-param\x3dinsertColLeft]").click(); return !1 } }(this)); return this.editor.hotkeys.add("ctrl+alt+right", function (a) { return function (b) { a.editMenu.find(".menu-item[data-param\x3dinsertColRight]").click(); return !1 } }(this)) }; b.prototype.decorate = function (a) { var b, d; 0 < a.parent(".simditor-table").length && this.undecorate(a); a.wrap('\x3cdiv class\x3d"simditor-table"\x3e\x3c/div\x3e'); 1 > a.find("thead").length && (d = g("\x3cthead /\x3e"), b = a.find("tr").first(), d.append(b), this._changeCellTag(b, "th"), b = a.find("tbody"), 0 < b.length ? b.before(d) : a.prepend(d)); this.initResize(a); return a.parent() }; b.prototype.undecorate = function (a) { if (0 < a.parent(".simditor-table").length) return a.parent().replaceWith(a) }; b.prototype.renderMenu = function () { var a; g('\x3cdiv class\x3d"menu-create-table"\x3e\n\x3c/div\x3e\n\x3cdiv class\x3d"menu-edit-table"\x3e\n  \x3cul\x3e\n    \x3cli\x3e\n      \x3ca tabindex\x3d"-1" unselectable\x3d"on" class\x3d"menu-item"\n        href\x3d"javascript:;" data-param\x3d"deleteRow"\x3e\n        \x3cspan\x3e' + this._t("deleteRow") + '\x3c/span\x3e\n      \x3c/a\x3e\n    \x3c/li\x3e\n    \x3cli\x3e\n      \x3ca tabindex\x3d"-1" unselectable\x3d"on" class\x3d"menu-item"\n        href\x3d"javascript:;" data-param\x3d"insertRowAbove"\x3e\n        \x3cspan\x3e' + this._t("insertRowAbove") + ' ( Ctrl + Alt + \u2191 )\x3c/span\x3e\n      \x3c/a\x3e\n    \x3c/li\x3e\n    \x3cli\x3e\n      \x3ca tabindex\x3d"-1" unselectable\x3d"on" class\x3d"menu-item"\n        href\x3d"javascript:;" data-param\x3d"insertRowBelow"\x3e\n        \x3cspan\x3e' + this._t("insertRowBelow") + ' ( Ctrl + Alt + \u2193 )\x3c/span\x3e\n      \x3c/a\x3e\n    \x3c/li\x3e\n    \x3cli\x3e\x3cspan class\x3d"separator"\x3e\x3c/span\x3e\x3c/li\x3e\n    \x3cli\x3e\n      \x3ca tabindex\x3d"-1" unselectable\x3d"on" class\x3d"menu-item"\n        href\x3d"javascript:;" data-param\x3d"deleteCol"\x3e\n        \x3cspan\x3e' + this._t("deleteColumn") + '\x3c/span\x3e\n      \x3c/a\x3e\n    \x3c/li\x3e\n    \x3cli\x3e\n      \x3ca tabindex\x3d"-1" unselectable\x3d"on" class\x3d"menu-item"\n        href\x3d"javascript:;" data-param\x3d"insertColLeft"\x3e\n        \x3cspan\x3e' + this._t("insertColumnLeft") + ' ( Ctrl + Alt + \u2190 )\x3c/span\x3e\n      \x3c/a\x3e\n    \x3c/li\x3e\n    \x3cli\x3e\n      \x3ca tabindex\x3d"-1" unselectable\x3d"on" class\x3d"menu-item"\n        href\x3d"javascript:;" data-param\x3d"insertColRight"\x3e\n        \x3cspan\x3e' + this._t("insertColumnRight") + ' ( Ctrl + Alt + \u2192 )\x3c/span\x3e\n      \x3c/a\x3e\n    \x3c/li\x3e\n    \x3cli\x3e\x3cspan class\x3d"separator"\x3e\x3c/span\x3e\x3c/li\x3e\n    \x3cli\x3e\n      \x3ca tabindex\x3d"-1" unselectable\x3d"on" class\x3d"menu-item"\n        href\x3d"javascript:;" data-param\x3d"deleteTable"\x3e\n        \x3cspan\x3e' + this._t("deleteTable") + "\x3c/span\x3e\n      \x3c/a\x3e\n    \x3c/li\x3e\n  \x3c/ul\x3e\n\x3c/div\x3e").appendTo(this.menuWrapper); this.createMenu = this.menuWrapper.find(".menu-create-table"); this.editMenu = this.menuWrapper.find(".menu-edit-table"); a = this.createTable(6, 6).appendTo(this.createMenu); this.createMenu.on("mouseenter", "td, th", function (b) { return function (c) { var d, f; b.createMenu.find("td, th").removeClass("selected"); d = g(c.currentTarget); c = d.parent(); f = c.find("td, th").index(d) + 1; d = c.prevAll("tr").addBack(); c.parent().is("tbody") && (d = d.add(a.find("thead tr"))); return d.find("td:lt(" + f + "), th:lt(" + f + ")").addClass("selected") } }(this)); this.createMenu.on("mouseleave", function (a) { return g(a.currentTarget).find("td, th").removeClass("selected") }); return this.createMenu.on("mousedown", "td, th", function (b) { return function (c) { var d, f; b.wrapper.removeClass("menu-on"); if (b.editor.inputManager.focused) return d = g(c.currentTarget), c = d.parent(), d = c.find("td").index(d) + 1, f = c.prevAll("tr").length + 1, c.parent().is("tbody") && (f += 1), a = b.createTable(f, d, !0), c = b.editor.selection.blockNodes().last(), b.editor.util.isEmptyNode(c) ? c.replaceWith(a) : c.after(a), b.decorate(a), b.editor.selection.setRangeAtStartOf(a.find("th:first")), b.editor.trigger("valuechanged"), !1 } }(this)) }; b.prototype.createTable = function (a, b, d) { var c, f, h, k, m, n, p, u, q; c = g("\x3ctable/\x3e"); k = g("\x3cthead/\x3e").appendTo(c); f = g("\x3ctbody/\x3e").appendTo(c); for (u = n = 0; 0 <= a ? n < a : n > a; u = 0 <= a ? ++n : --n) for (m = g("\x3ctr/\x3e"), m.appendTo(0 === u ? k : f), p = 0, q = b; 0 <= q ? p < q : p > q; 0 <= q ? ++p : --p) h = g(0 === u ? "\x3cth/\x3e" : "\x3ctd/\x3e").appendTo(m), d && h.append(this.editor.util.phBr); return c }; b.prototype.refreshTableWidth = function (a) { var b, d; d = a.width(); b = a.find("col"); return a.find("thead tr th").each(function (a, c) { return b.eq(a).attr("width", g(c).outerWidth() / d * 100 + "%") }) }; b.prototype.setActive = function (a) { b.__super__.setActive.call(this, a); if (a) return this.createMenu.hide(), this.editMenu.show(); this.createMenu.show(); return this.editMenu.hide() }; b.prototype._changeCellTag = function (a, b) { return a.find("td, th").each(function (a, c) { var d; d = g(c); return d.replaceWith("\x3c" + b + "\x3e" + d.html() + "\x3c/" + b + "\x3e") }) }; b.prototype.deleteRow = function (a) { var b, d; d = a.parent("tr"); if (1 > d.closest("table").find("tr").length) return this.deleteTable(a); b = this._nextRow(d); 0 < b.length || (b = this._prevRow(d)); a = d.find("td, th").index(a); d.parent().is("thead") && (b.appendTo(d.parent()), this._changeCellTag(b, "th")); d.remove(); return this.editor.selection.setRangeAtEndOf(b.find("td, th").eq(a)) }; b.prototype.insertRow = function (a, b) { var c, e, f, h, k, m; null == b && (b = "after"); e = a.parent("tr"); c = e.closest("table"); h = 0; c.find("tr").each(function (a, b) { return h = Math.max(h, g(b).find("td").length) }); k = e.find("td, th").index(a); c = g("\x3ctr/\x3e"); f = "td"; if ("after" === b && e.parent().is("thead")) e.parent().next("tbody").prepend(c); else if ("before" === b && e.parent().is("thead")) e.before(c), e.parent().next("tbody").prepend(e), this._changeCellTag(e, "td"), f = "th"; else e[b](c); e = 1; for (m = h; 1 <= m ? e <= m : e >= m; 1 <= m ? ++e : --e) g("\x3c" + f + "/\x3e").append(this.editor.util.phBr).appendTo(c); return this.editor.selection.setRangeAtStartOf(c.find("td, th").eq(k)) }; b.prototype.deleteCol = function (a) { var b, d, e, f; b = a.parent("tr"); f = 2 > b.closest("table").find("tr").length; e = 1 > a.siblings("td, th").length; if (f && e) return this.deleteTable(a); d = b.find("td, th").index(a); a = a.next("td, th"); 0 < a.length || (a = b.prev("td, th")); b = b.closest("table"); b.find("col").eq(d).remove(); b.find("tr").each(function (a, b) { return g(b).find("td, th").eq(d).remove() }); this.refreshTableWidth(b); return this.editor.selection.setRangeAtEndOf(a) }; b.prototype.insertCol = function (a, b) { var c, e, f, h, k; null == b && (b = "after"); h = a.parent("tr").find("td, th").index(a); f = a.closest("table"); c = f.find("col").eq(h); f.find("tr").each(function (a) { return function (c, d) { var e; e = g(d).parent().is("thead") ? "th" : "td"; e = g("\x3c" + e + "/\x3e").append(a.editor.util.phBr); return g(d).find("td, th").eq(h)[b](e) } }(this)); e = g("\x3ccol/\x3e"); c[b](e); k = f.width(); k = Math.max(parseFloat(c.attr("width")) / 2, 50 / k * 100); c.attr("width", k + "%"); e.attr("width", k + "%"); this.refreshTableWidth(f); c = "after" === b ? a.next("td, th") : a.prev("td, th"); return this.editor.selection.setRangeAtStartOf(c) }; b.prototype.deleteTable = function (a) { var b; b = a.closest(".simditor-table"); a = b.next("p"); b.remove(); if (0 < a.length) return this.editor.selection.setRangeAtStartOf(a) }; b.prototype.command = function (a) { var b; b = this.editor.selection.containerNode().closest("td, th"); if (0 < b.length) { if ("deleteRow" === a) this.deleteRow(b); else if ("insertRowAbove" === a) this.insertRow(b, "before"); else if ("insertRowBelow" === a) this.insertRow(b); else if ("deleteCol" === a) this.deleteCol(b); else if ("insertColLeft" === a) this.insertCol(b, "before"); else if ("insertColRight" === a) this.insertCol(b); else if ("deleteTable" === a) this.deleteTable(b); else return; return this.editor.trigger("valuechanged") } }; return b }(t); q.Toolbar.addButton(p); p = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "strikethrough"; b.prototype.icon = "strikethrough"; b.prototype.htmlTag = "strike"; b.prototype.disableTag = "pre"; b.prototype._activeStatus = function () { var a; a = !0 === document.queryCommandState("strikethrough"); this.setActive(a); return this.active }; b.prototype.command = function () { document.execCommand("strikethrough"); this.editor.util.support.oninput || this.editor.trigger("valuechanged"); return g(document).trigger("selectionchange") }; return b }(t); q.Toolbar.addButton(p); p = function (g) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, g); b.prototype.name = "alignment"; b.prototype.icon = "align-left"; b.prototype.htmlTag = "p, h1, h2, h3, h4, td, th"; b.prototype._init = function () { this.menu = [{ name: "left", text: this._t("alignLeft"), icon: "align-left", param: "left" }, { name: "center", text: this._t("alignCenter"), icon: "align-center", param: "center" }, { name: "right", text: this._t("alignRight"), icon: "align-right", param: "right" }]; return b.__super__._init.call(this) }; b.prototype.setActive = function (a, c) { null == c && (c = "left"); "left" !== c && "center" !== c && "right" !== c && (c = "left"); "left" === c ? b.__super__.setActive.call(this, !1) : b.__super__.setActive.call(this, a); this.el.removeClass("align-left align-center align-right"); a && this.el.addClass("align-" + c); this.setIcon("align-" + c); return this.menuEl.find(".menu-item").show().end().find(".menu-item-" + c).hide() }; b.prototype._status = function () { this.nodes = this.editor.selection.nodes().filter(this.htmlTag); if (1 > this.nodes.length) return this.setDisabled(!0), this.setActive(!1); this.setDisabled(!1); return this.setActive(!0, this.nodes.first().css("text-align")) }; b.prototype.command = function (a) { if ("left" !== a && "center" !== a && "right" !== a) throw Error("simditor alignment button: invalid align " + a); this.nodes.css({ "text-align": "left" === a ? "" : a }); this.editor.trigger("valuechanged"); return this.editor.inputManager.throttledSelectionChanged() }; return b }(t); q.Toolbar.addButton(p); p = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "letterspace"; b.prototype.icon = "exttext-width"; b.prototype.disableTag = "pre"; b.prototype.htmlTag = "span"; b.prototype.sizeMap = { "0%": "0em", "10%": "0.1em", "25%": "0.25em", "50%": "0.50em", "75%": "0.75em", "100%": "1em" }; b.prototype._init = function () { this.menu = [{ name: "100%", text: "1em", param: "5" }, { name: "75%", text: "0.75em", param: "4" }, { name: "50%", text: "0.50em", param: "3" }, { name: "25%", text: "0.25em", param: "2" }, { name: "10%", text: "0.1em", param: "1" }, { name: "0%", text: "0em", param: "0" }]; return b.__super__._init.call(this) }; b.prototype._activeStatus = function () { var a, b, d, e; this.editor.selection.range(); e = this.editor.selection.startNodes(); b = this.editor.selection.endNodes(); d = e.filter("span"); a = b.filter("span"); a = 0 < e.length && 0 < b.length && d.is(a); this.setActive(a); return this.active }; b.prototype.command = function (a) { if (!this.editor.selection.range().collapsed) { for (var b = "0em", d = 0; d < this.menu.length; d++) { var e = this.menu[d]; if (a == e.param) { b = this.sizeMap[e.name]; break } } document.execCommand("styleWithCSS", !1, !0); document.execCommand("fontSize", !1, 3); document.execCommand("styleWithCSS", !1, !1); this.editor.selection.reset(); this.editor.selection.range(); a = this.editor.selection.containerNode(); a = a[0].nodeType === Node.TEXT_NODE ? a.closest("span") : a.find("span"); a.each(function (a) { return function (a, c) { g(c).css({ "letter-spacing": b }) } }(this)); return this.editor.trigger("valuechanged") } }; return b }(t); q.Toolbar.addButton(p); lineheightButton = function (h) { function b() { return b.__super__.constructor.apply(this, arguments) } n(b, h); b.prototype.name = "lineheight"; b.prototype.icon = "exttext-height"; b.prototype.disableTag = "pre"; b.prototype.htmlTag = "span"; b.prototype.sizeMap = { "1.0\u500d": "1.0", "1.5\u500d": "1.5", "1.8\u500d": "1.8", "2.0\u500d": "2.0", "2.5\u500d": "2.5", "3.0\u500d": "3.0" }; b.prototype._init = function () { this.menu = [{ name: "3.0\u500d", text: "3.0\u500d", param: "5" }, { name: "2.5\u500d", text: "2.5\u500d", param: "4" }, { name: "2.0\u500d", text: "2.0\u500d", param: "3" }, { name: "1.8\u500d", text: "1.8\u500d", param: "2" }, { name: "1.5\u500d", text: "1.5\u500d", param: "1" }, { name: "1.0\u500d", text: "1.0\u500d", param: "0" }]; return b.__super__._init.call(this) }; b.prototype.command = function (a) { if (!this.editor.selection.range().collapsed) { for (var b = "1.0", d = 0; d < this.menu.length; d++) { var e = this.menu[d]; if (a == e.param) { b = this.sizeMap[e.name]; break } } document.execCommand("styleWithCSS", !1, !0); document.execCommand("fontSize", !1, 3); document.execCommand("styleWithCSS", !1, !1); this.editor.selection.reset(); this.editor.selection.range(); a = this.editor.selection.containerNode(); a = a[0].nodeType === Node.TEXT_NODE ? a.closest("span") : a.find("span"); a.each(function (a) { return function (a, c) { g(c).css({ "line-height": b }) } }(this)); return this.editor.trigger("valuechanged") } }; return b }(t); q.Toolbar.addButton(lineheightButton); return q });