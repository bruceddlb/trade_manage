



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `DMSConnectionString_MySqlServer`
//     Provider:               `MySql.Data.MySqlClient`
//     Connection String:      `Server=localhost;database=test;user id=root;password=**zapped**;`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace QSDMS.Data.Service.MySqlServer
{

	public partial class QSDMS_MySQLDB : Database
	{
		public QSDMS_MySQLDB() 
			: base("DMSConnectionString_MySqlServer")
		{
			CommonConstruct();
		}

		public QSDMS_MySQLDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			QSDMS_MySQLDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static QSDMS_MySQLDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new QSDMS_MySQLDB();
        }

		[ThreadStatic] static QSDMS_MySQLDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static QSDMS_MySQLDB repo { get { return QSDMS_MySQLDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }
			public static System.Data.DataTable GetTable(string sql, params object[] args) { return repo.GetDatatable(sql, args); }
            public static int Count(string sql, params object[] args) { return repo.Count(sql, args); }
            public static int Execute(string sql, params object[] args) { return repo.Execute(sql, args); }

		}

	}
	



    
	[TableName("columns_priv")]


	[ExplicitColumns]
    public partial class columns_priv : QSDMS_MySQLDB.Record<columns_priv>  
    {

	}

    
	[TableName("db")]


	[ExplicitColumns]
    public partial class db : QSDMS_MySQLDB.Record<db>  
    {

	}

    
	[TableName("event")]


	[ExplicitColumns]
    public partial class @event : QSDMS_MySQLDB.Record<@event>  
    {

	}

    
	[TableName("func")]


	[ExplicitColumns]
    public partial class func : QSDMS_MySQLDB.Record<func>  
    {

	}

    
	[TableName("general_log")]


	[ExplicitColumns]
    public partial class general_log : QSDMS_MySQLDB.Record<general_log>  
    {

	}

    
	[TableName("help_category")]


	[ExplicitColumns]
    public partial class help_category : QSDMS_MySQLDB.Record<help_category>  
    {

	}

    
	[TableName("help_keyword")]


	[ExplicitColumns]
    public partial class help_keyword : QSDMS_MySQLDB.Record<help_keyword>  
    {

	}

    
	[TableName("help_relation")]


	[ExplicitColumns]
    public partial class help_relation : QSDMS_MySQLDB.Record<help_relation>  
    {

	}

    
	[TableName("help_topic")]


	[ExplicitColumns]
    public partial class help_topic : QSDMS_MySQLDB.Record<help_topic>  
    {

	}

    
	[TableName("host")]


	[ExplicitColumns]
    public partial class host : QSDMS_MySQLDB.Record<host>  
    {

	}

    
	[TableName("ndb_binlog_index")]


	[ExplicitColumns]
    public partial class ndb_binlog_index : QSDMS_MySQLDB.Record<ndb_binlog_index>  
    {

	}

    
	[TableName("plugin")]


	[ExplicitColumns]
    public partial class plugin : QSDMS_MySQLDB.Record<plugin>  
    {

	}

    
	[TableName("proc")]


	[ExplicitColumns]
    public partial class proc : QSDMS_MySQLDB.Record<proc>  
    {

	}

    
	[TableName("procs_priv")]


	[ExplicitColumns]
    public partial class procs_priv : QSDMS_MySQLDB.Record<procs_priv>  
    {

	}

    
	[TableName("proxies_priv")]


	[ExplicitColumns]
    public partial class proxies_priv : QSDMS_MySQLDB.Record<proxies_priv>  
    {

	}

    
	[TableName("servers")]


	[ExplicitColumns]
    public partial class server : QSDMS_MySQLDB.Record<server>  
    {

	}

    
	[TableName("slow_log")]


	[ExplicitColumns]
    public partial class slow_log : QSDMS_MySQLDB.Record<slow_log>  
    {

	}

    
	[TableName("tables_priv")]


	[ExplicitColumns]
    public partial class tables_priv : QSDMS_MySQLDB.Record<tables_priv>  
    {

	}

    
	[TableName("time_zone")]


	[ExplicitColumns]
    public partial class time_zone : QSDMS_MySQLDB.Record<time_zone>  
    {

	}

    
	[TableName("time_zone_leap_second")]


	[ExplicitColumns]
    public partial class time_zone_leap_second : QSDMS_MySQLDB.Record<time_zone_leap_second>  
    {

	}

    
	[TableName("time_zone_name")]


	[ExplicitColumns]
    public partial class time_zone_name : QSDMS_MySQLDB.Record<time_zone_name>  
    {

	}

    
	[TableName("time_zone_transition")]


	[ExplicitColumns]
    public partial class time_zone_transition : QSDMS_MySQLDB.Record<time_zone_transition>  
    {

	}

    
	[TableName("time_zone_transition_type")]


	[ExplicitColumns]
    public partial class time_zone_transition_type : QSDMS_MySQLDB.Record<time_zone_transition_type>  
    {

	}

    
	[TableName("user")]


	[ExplicitColumns]
    public partial class user : QSDMS_MySQLDB.Record<user>  
    {

	}

    
	[TableName("cond_instances")]


	[ExplicitColumns]
    public partial class cond_instance : QSDMS_MySQLDB.Record<cond_instance>  
    {

	}

    
	[TableName("events_waits_current")]


	[ExplicitColumns]
    public partial class events_waits_current : QSDMS_MySQLDB.Record<events_waits_current>  
    {

	}

    
	[TableName("events_waits_history")]


	[ExplicitColumns]
    public partial class events_waits_history : QSDMS_MySQLDB.Record<events_waits_history>  
    {

	}

    
	[TableName("events_waits_history_long")]


	[ExplicitColumns]
    public partial class events_waits_history_long : QSDMS_MySQLDB.Record<events_waits_history_long>  
    {

	}

    
	[TableName("events_waits_summary_by_instance")]


	[ExplicitColumns]
    public partial class events_waits_summary_by_instance : QSDMS_MySQLDB.Record<events_waits_summary_by_instance>  
    {

	}

    
	[TableName("events_waits_summary_by_thread_by_event_name")]


	[ExplicitColumns]
    public partial class events_waits_summary_by_thread_by_event_name : QSDMS_MySQLDB.Record<events_waits_summary_by_thread_by_event_name>  
    {

	}

    
	[TableName("events_waits_summary_global_by_event_name")]


	[ExplicitColumns]
    public partial class events_waits_summary_global_by_event_name : QSDMS_MySQLDB.Record<events_waits_summary_global_by_event_name>  
    {

	}

    
	[TableName("file_instances")]


	[ExplicitColumns]
    public partial class file_instance : QSDMS_MySQLDB.Record<file_instance>  
    {

	}

    
	[TableName("file_summary_by_event_name")]


	[ExplicitColumns]
    public partial class file_summary_by_event_name : QSDMS_MySQLDB.Record<file_summary_by_event_name>  
    {

	}

    
	[TableName("file_summary_by_instance")]


	[ExplicitColumns]
    public partial class file_summary_by_instance : QSDMS_MySQLDB.Record<file_summary_by_instance>  
    {

	}

    
	[TableName("mutex_instances")]


	[ExplicitColumns]
    public partial class mutex_instance : QSDMS_MySQLDB.Record<mutex_instance>  
    {

	}

    
	[TableName("performance_timers")]


	[ExplicitColumns]
    public partial class performance_timer : QSDMS_MySQLDB.Record<performance_timer>  
    {

	}

    
	[TableName("rwlock_instances")]


	[ExplicitColumns]
    public partial class rwlock_instance : QSDMS_MySQLDB.Record<rwlock_instance>  
    {

	}

    
	[TableName("setup_consumers")]


	[ExplicitColumns]
    public partial class setup_consumer : QSDMS_MySQLDB.Record<setup_consumer>  
    {

	}

    
	[TableName("setup_instruments")]


	[ExplicitColumns]
    public partial class setup_instrument : QSDMS_MySQLDB.Record<setup_instrument>  
    {

	}

    
	[TableName("setup_timers")]


	[ExplicitColumns]
    public partial class setup_timer : QSDMS_MySQLDB.Record<setup_timer>  
    {

	}

    
	[TableName("threads")]


	[ExplicitColumns]
    public partial class thread : QSDMS_MySQLDB.Record<thread>  
    {

	}

    
	[TableName("t_test")]


	[PrimaryKey("Name", autoIncrement=false)]

	[ExplicitColumns]
    public partial class t_test : QSDMS_MySQLDB.Record<t_test>  
    {



		[Column] public string Name { get; set; }





		[Column] public string Remark { get; set; }



	}


}



